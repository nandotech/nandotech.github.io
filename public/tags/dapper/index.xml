<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dapper on NandoTech</title>
    <link>https://blog.nandotech.com/tags/dapper/</link>
    <description>Recent content in Dapper on NandoTech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>info@nandotech.com (Fernando Rodriguez)</managingEditor>
    <webMaster>info@nandotech.com (Fernando Rodriguez)</webMaster>
    <lastBuildDate>Thu, 19 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.nandotech.com/tags/dapper/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A File Upload API with Nancy, .NET Core in a Shockingly Small Amount of Code</title>
      <link>https://blog.nandotech.com/post/2017-01-19-nancy-dotnet-core-file-upload/</link>
      <pubDate>Thu, 19 Jan 2017 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2017-01-19-nancy-dotnet-core-file-upload/</guid>
      <description>Happy New Year to everyone and my apologies for the long hiatus between posts! Will definitely be keeping it more regular with posts going forward, so I decided for this post I&amp;rsquo;d put together a fully working application that actually solves a business problem (you could actually take this code and use it yourself!).
Since my last NancyFX post about async functions the team has dropped another update! We are now on Nancy 2.</description>
    </item>
    
    <item>
      <title>Exploring Asynchronous Modules with NancyFX 2.0 &amp; .NET Core</title>
      <link>https://blog.nandotech.com/post/2016-11-10-dot-net-core-nancy-async/</link>
      <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2016-11-10-dot-net-core-nancy-async/</guid>
      <description>This post will serve as a follow-up to our earlier NancyFX exploration. A few weeks ago, I posted Building an (awesome) API with NancyFX 2.0 + Dapper where we covered all the basics of Nancy and running on .NET Core. If you have not read our previous post, not to worry, there will be very little to no overlap between the 2 posts. Here, we will focus in on and deep dive into the use of Async Modules in NancyFX as well as how the Before and After action method hooks work.</description>
    </item>
    
    <item>
      <title>.NET Core Console Apps (Twilio API)</title>
      <link>https://blog.nandotech.com/post/2016-11-02-net-core-console-apps/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2016-11-02-net-core-console-apps/</guid>
      <description>In the spirit of open source (and to pay it something better than lip service) NandoTech has published our first open source utility that we are using in-house. The application in and of itself is nothing special and doesn&amp;rsquo;t do anything particuarly complicated, but it solves an important problem for us while having the added benefit of possibly helping someone else with a similar problem.
   NandoTech Twilio          The utility we&amp;rsquo;ve released is a Twilio Call Importer which essentially just goes out and grabs all SIP call logs from Twilio and then saves them in batches of 1,000 to [SQL Server](), but there are serveral guides showing how you can configure Dapper for other databases very easily around the web.</description>
    </item>
    
    <item>
      <title>Building an (awesome) API with NancyFX 2.0 &#43; Dapper</title>
      <link>https://blog.nandotech.com/post/2016-10-25-nancyfx-webapi-dapper/</link>
      <pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2016-10-25-nancyfx-webapi-dapper/</guid>
      <description>NancyFX &amp;amp; Dapper are so hot right now. Naturally, I had to put them together. I am a huge fan and follower of .NET Core and the entire open source movement going on inside Microsoft and really what seems like the world over. More and more companies, big and small are open sourcing projects as the default rather than the exception. ASP.NET Core looks extremely promising, but I was always a fan of NancyFX and wanted to try it out.</description>
    </item>
    
    <item>
      <title>Greenfield Applications (Part 1, Project Armadillo)</title>
      <link>https://blog.nandotech.com/post/2016-10-02-greenfield-applications/</link>
      <pubDate>Sun, 02 Oct 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2016-10-02-greenfield-applications/</guid>
      <description>There&amp;rsquo;s something whimsical about Greenfield applications. The feeling of complete freedom over architecture decisions. The drawn out, sometimes heated debates concerning the most minute of details. Javascript frameworks. React, no&amp;ndash;let&amp;rsquo;s use Angular! Better yet, let&amp;rsquo;s use Anguar 2 because that&amp;rsquo;s got to be better than 1, right?
All kidding aside, the feeling of freedom of laying out and choosing technologies and how they will be distributed, hosted &amp;amp; supported is pretty awesome.</description>
    </item>
    
  </channel>
</rss>