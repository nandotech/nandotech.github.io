<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nancyfx on NandoTech</title>
    <link>https://blog.nandotech.com/tags/nancyfx/</link>
    <description>Recent content in Nancyfx on NandoTech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>info@nandotech.com (Fernando Rodriguez)</managingEditor>
    <webMaster>info@nandotech.com (Fernando Rodriguez)</webMaster>
    <lastBuildDate>Thu, 10 Nov 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.nandotech.com/tags/nancyfx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Exploring Asynchronous Modules with NancyFX 2.0 &amp; .NET Core</title>
      <link>https://blog.nandotech.com/post/2016-11-10-dot-net-core-nancy-async/</link>
      <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2016-11-10-dot-net-core-nancy-async/</guid>
      <description>This post will serve as a follow-up to our earlier NancyFX exploration. A few weeks ago, I posted Building an (awesome) API with NancyFX 2.0 + Dapper where we covered all the basics of Nancy and running on .NET Core. If you have not read our previous post, not to worry, there will be very little to no overlap between the 2 posts. Here, we will focus in on and deep dive into the use of Async Modules in NancyFX as well as how the Before and After action method hooks work.</description>
    </item>
    
    <item>
      <title>Building an (awesome) API with NancyFX 2.0 &#43; Dapper</title>
      <link>https://blog.nandotech.com/post/2016-10-25-nancyfx-webapi-dapper/</link>
      <pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2016-10-25-nancyfx-webapi-dapper/</guid>
      <description>NancyFX &amp;amp; Dapper are so hot right now. Naturally, I had to put them together. I am a huge fan and follower of .NET Core and the entire open source movement going on inside Microsoft and really what seems like the world over. More and more companies, big and small are open sourcing projects as the default rather than the exception. ASP.NET Core looks extremely promising, but I was always a fan of NancyFX and wanted to try it out.</description>
    </item>
    
    <item>
      <title>Greenfield Applications (Part 1, Project Armadillo)</title>
      <link>https://blog.nandotech.com/post/2016-10-02-greenfield-applications/</link>
      <pubDate>Sun, 02 Oct 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2016-10-02-greenfield-applications/</guid>
      <description>There&amp;rsquo;s something whimsical about Greenfield applications. The feeling of complete freedom over architecture decisions. The drawn out, sometimes heated debates concerning the most minute of details. Javascript frameworks. React, no&amp;ndash;let&amp;rsquo;s use Angular! Better yet, let&amp;rsquo;s use Anguar 2 because that&amp;rsquo;s got to be better than 1, right?
All kidding aside, the feeling of freedom of laying out and choosing technologies and how they will be distributed, hosted &amp;amp; supported is pretty awesome.</description>
    </item>
    
  </channel>
</rss>