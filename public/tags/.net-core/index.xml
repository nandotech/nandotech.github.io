<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.Net Core on NandoTech</title>
    <link>https://blog.nandotech.com/tags/.net-core/</link>
    <description>Recent content in .Net Core on NandoTech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>info@nandotech.com (Fernando Rodriguez)</managingEditor>
    <webMaster>info@nandotech.com (Fernando Rodriguez)</webMaster>
    <lastBuildDate>Thu, 16 Mar 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.nandotech.com/tags/.net-core/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ZEIT Now Deploying ASP.NET (and .NET) Core Apps in seconds with your Dockerfile</title>
      <link>https://blog.nandotech.com/post/2017-03-16-zeit-now-deploying-dotnet-core-in-a-docker-bow/</link>
      <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2017-03-16-zeit-now-deploying-dotnet-core-in-a-docker-bow/</guid>
      <description>If you&amp;rsquo;re anything like me, you constantly are finding more and more tasks that require your attention. To make matters worse, the industry definition of &amp;ldquo;DevOps&amp;rdquo; is still evolving itself, quickly becoming ubiquitous with &amp;ldquo;a litle bit of everything&amp;rdquo; in the process.
Like a breath of fresh air, ZEIT is a cloud service that allows near-mindless deployment of javascript &amp;amp; node.js apps. Much thanks probably also belongs to Scott Hanselman and his ever-tinkering soul who published &amp;ldquo;ZEIT now deployments of open source ASP.</description>
    </item>
    
    <item>
      <title>Visual Studio 2017 Final Released</title>
      <link>https://blog.nandotech.com/post/2017-03-09-visual-studio-2017-final-released/</link>
      <pubDate>Thu, 09 Mar 2017 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2017-03-09-visual-studio-2017-final-released/</guid>
      <description>Microsoft has finally dropped Visual Studio 2017 with a bevy of new features and also relocated all our .NET Core docs over to https://docs.microsoft.com/. I, for one, had downloaded Visual Studio 2017 RC quite a while back and due to some horrible judgement and lack of forethought I actually had been using the IDE almost full-time for my .NET projects. I basically used it for everything I could and if I couldn&amp;rsquo;t make the transition, I simply used Visual Studio Code.</description>
    </item>
    
    <item>
      <title>A File Upload API with Nancy, .NET Core in a Shockingly Small Amount of Code</title>
      <link>https://blog.nandotech.com/post/2017-01-19-nancy-dotnet-core-file-upload/</link>
      <pubDate>Thu, 19 Jan 2017 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2017-01-19-nancy-dotnet-core-file-upload/</guid>
      <description>Happy New Year to everyone and my apologies for the long hiatus between posts! Will definitely be keeping it more regular with posts going forward, so I decided for this post I&amp;rsquo;d put together a fully working application that actually solves a business problem (you could actually take this code and use it yourself!).
Since my last NancyFX post about async functions the team has dropped another update! We are now on Nancy 2.</description>
    </item>
    
    <item>
      <title>Choosing your .NET Core Version CLI</title>
      <link>https://blog.nandotech.com/post/2016-12-20-dotnet-core-cli-version.1/</link>
      <pubDate>Tue, 20 Dec 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2016-12-20-dotnet-core-cli-version.1/</guid>
      <description>I recently downloaded and upgraded to .NET Core 1.1.0 which comes along with updated CLI tools, 1.0.0-preview3-004056. This new version reflects the CLI tools that are being used for the new .csproj project system which does away with project.json that many of us grew to know and love.
Of course, this has been a long time coming and the announcement that Microsoft would be moving back to .csproj was announced way back in March or so.</description>
    </item>
    
    <item>
      <title>.NET Core Curated Resources List</title>
      <link>https://blog.nandotech.com/post/2016-11-21-dotnet-core-resources/</link>
      <pubDate>Mon, 21 Nov 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2016-11-21-dotnet-core-resources/</guid>
      <description>Next week I hope to continue our series on the NancyFX framework for building web applications. For our next post I hope to cover Routing as well as passing arguments via query string, body and how that all works within Nancy. As a quick break, this week I&amp;rsquo;ve decided to put together a compilation of .NET Core resources that may help anyone at any .NET skill level jump in and find the information they are looking for.</description>
    </item>
    
    <item>
      <title>Exploring Asynchronous Modules with NancyFX 2.0 &amp; .NET Core</title>
      <link>https://blog.nandotech.com/post/2016-11-10-dot-net-core-nancy-async/</link>
      <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2016-11-10-dot-net-core-nancy-async/</guid>
      <description>This post will serve as a follow-up to our earlier NancyFX exploration. A few weeks ago, I posted Building an (awesome) API with NancyFX 2.0 + Dapper where we covered all the basics of Nancy and running on .NET Core. If you have not read our previous post, not to worry, there will be very little to no overlap between the 2 posts. Here, we will focus in on and deep dive into the use of Async Modules in NancyFX as well as how the Before and After action method hooks work.</description>
    </item>
    
    <item>
      <title>.NET Core Console Apps (Twilio API)</title>
      <link>https://blog.nandotech.com/post/2016-11-02-net-core-console-apps/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2016-11-02-net-core-console-apps/</guid>
      <description>In the spirit of open source (and to pay it something better than lip service) NandoTech has published our first open source utility that we are using in-house. The application in and of itself is nothing special and doesn&amp;rsquo;t do anything particuarly complicated, but it solves an important problem for us while having the added benefit of possibly helping someone else with a similar problem.
   NandoTech Twilio          The utility we&amp;rsquo;ve released is a Twilio Call Importer which essentially just goes out and grabs all SIP call logs from Twilio and then saves them in batches of 1,000 to [SQL Server](), but there are serveral guides showing how you can configure Dapper for other databases very easily around the web.</description>
    </item>
    
    <item>
      <title>Building an (awesome) API with NancyFX 2.0 &#43; Dapper</title>
      <link>https://blog.nandotech.com/post/2016-10-25-nancyfx-webapi-dapper/</link>
      <pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2016-10-25-nancyfx-webapi-dapper/</guid>
      <description>NancyFX &amp;amp; Dapper are so hot right now. Naturally, I had to put them together. I am a huge fan and follower of .NET Core and the entire open source movement going on inside Microsoft and really what seems like the world over. More and more companies, big and small are open sourcing projects as the default rather than the exception. ASP.NET Core looks extremely promising, but I was always a fan of NancyFX and wanted to try it out.</description>
    </item>
    
    <item>
      <title>Greenfield Applications (Part 1, Project Armadillo)</title>
      <link>https://blog.nandotech.com/post/2016-10-02-greenfield-applications/</link>
      <pubDate>Sun, 02 Oct 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2016-10-02-greenfield-applications/</guid>
      <description>There&amp;rsquo;s something whimsical about Greenfield applications. The feeling of complete freedom over architecture decisions. The drawn out, sometimes heated debates concerning the most minute of details. Javascript frameworks. React, no&amp;ndash;let&amp;rsquo;s use Angular! Better yet, let&amp;rsquo;s use Anguar 2 because that&amp;rsquo;s got to be better than 1, right?
All kidding aside, the feeling of freedom of laying out and choosing technologies and how they will be distributed, hosted &amp;amp; supported is pretty awesome.</description>
    </item>
    
    <item>
      <title>Dot Net Core 1.0.1 &amp; Semantic Versioning</title>
      <link>https://blog.nandotech.com/post/2016-09-21-dot-net-core-1_0_1/</link>
      <pubDate>Wed, 21 Sep 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2016-09-21-dot-net-core-1_0_1/</guid>
      <description>This past week marked the first official patch update since .NET Core&amp;rsquo;s initial release. Naturally, the version number we have jumped up to is 1.0.1. If you spent any time with the beta&amp;rsquo;s and rc1-8, let me forewarn you now: DO NOT go open project.json and edit every single reference up to 1.0.1.
Firstly, in a basic Hello World or a Console App, the declaration the .NET Core version has changed very slightly.</description>
    </item>
    
  </channel>
</rss>