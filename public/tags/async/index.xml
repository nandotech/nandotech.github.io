<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Async on NandoTech</title>
    <link>https://blog.nandotech.com/tags/async/</link>
    <description>Recent content in Async on NandoTech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>info@nandotech.com (Fernando Rodriguez)</managingEditor>
    <webMaster>info@nandotech.com (Fernando Rodriguez)</webMaster>
    <lastBuildDate>Thu, 10 Nov 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.nandotech.com/tags/async/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Exploring Asynchronous Modules with NancyFX 2.0 &amp; .NET Core</title>
      <link>https://blog.nandotech.com/post/2016-11-10-dot-net-core-nancy-async/</link>
      <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2016-11-10-dot-net-core-nancy-async/</guid>
      <description>This post will serve as a follow-up to our earlier NancyFX exploration. A few weeks ago, I posted Building an (awesome) API with NancyFX 2.0 + Dapper where we covered all the basics of Nancy and running on .NET Core. If you have not read our previous post, not to worry, there will be very little to no overlap between the 2 posts. Here, we will focus in on and deep dive into the use of Async Modules in NancyFX as well as how the Before and After action method hooks work.</description>
    </item>
    
  </channel>
</rss>