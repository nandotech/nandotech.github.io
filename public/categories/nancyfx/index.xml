<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nancyfx on NandoTech</title>
    <link>https://blog.nandotech.com/categories/nancyfx/</link>
    <description>Recent content in Nancyfx on NandoTech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>info@nandotech.com (Fernando Rodriguez)</managingEditor>
    <webMaster>info@nandotech.com (Fernando Rodriguez)</webMaster>
    <lastBuildDate>Thu, 19 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.nandotech.com/categories/nancyfx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A File Upload API with Nancy, .NET Core in a Shockingly Small Amount of Code</title>
      <link>https://blog.nandotech.com/post/2017-01-19-nancy-dotnet-core-file-upload/</link>
      <pubDate>Thu, 19 Jan 2017 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2017-01-19-nancy-dotnet-core-file-upload/</guid>
      <description>Happy New Year to everyone and my apologies for the long hiatus between posts! Will definitely be keeping it more regular with posts going forward, so I decided for this post I&amp;rsquo;d put together a fully working application that actually solves a business problem (you could actually take this code and use it yourself!).
Since my last NancyFX post about async functions the team has dropped another update! We are now on Nancy 2.</description>
    </item>
    
    <item>
      <title>Exploring Asynchronous Modules with NancyFX 2.0 &amp; .NET Core</title>
      <link>https://blog.nandotech.com/post/2016-11-10-dot-net-core-nancy-async/</link>
      <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2016-11-10-dot-net-core-nancy-async/</guid>
      <description>This post will serve as a follow-up to our earlier NancyFX exploration. A few weeks ago, I posted Building an (awesome) API with NancyFX 2.0 + Dapper where we covered all the basics of Nancy and running on .NET Core. If you have not read our previous post, not to worry, there will be very little to no overlap between the 2 posts. Here, we will focus in on and deep dive into the use of Async Modules in NancyFX as well as how the Before and After action method hooks work.</description>
    </item>
    
    <item>
      <title>Building an (awesome) API with NancyFX 2.0 &#43; Dapper</title>
      <link>https://blog.nandotech.com/post/2016-10-25-nancyfx-webapi-dapper/</link>
      <pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2016-10-25-nancyfx-webapi-dapper/</guid>
      <description>NancyFX &amp;amp; Dapper are so hot right now. Naturally, I had to put them together. I am a huge fan and follower of .NET Core and the entire open source movement going on inside Microsoft and really what seems like the world over. More and more companies, big and small are open sourcing projects as the default rather than the exception. ASP.NET Core looks extremely promising, but I was always a fan of NancyFX and wanted to try it out.</description>
    </item>
    
  </channel>
</rss>