<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on NandoTech</title>
    <link>https://nandotech.github.io/post/</link>
    <description>Recent content in Posts on NandoTech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>info@nandotech.com (Fernando Rodriguez)</managingEditor>
    <webMaster>info@nandotech.com (Fernando Rodriguez)</webMaster>
    <lastBuildDate>Tue, 25 Oct 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://nandotech.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Building an (awesome) API with NancyFX 2.0 &#43; Dapper</title>
      <link>https://nandotech.github.io/post/2016-10-25-nancyfx-webapi-dapper/</link>
      <pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://nandotech.github.io/post/2016-10-25-nancyfx-webapi-dapper/</guid>
      <description>

&lt;h2 id=&#34;nancyfx-dapper-are-so-hot-right-now-naturally-i-had-to-put-them-together&#34;&gt;NancyFX &amp;amp; Dapper are so hot right now. Naturally, I had to put them together.&lt;/h2&gt;

&lt;h4 id=&#34;i-am-a-huge-fan-and-follower-of-net-core-https-dot-net-and-the-entire-open-source-movement-insinde-microsoft&#34;&gt;I am a huge fan and follower of &lt;a href=&#34;https://dot.net&#34;&gt;.NET Core&lt;/a&gt; and the entire open source movement insinde Microsoft.&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://asp.net&#34;&gt;ASP.NET Core&lt;/a&gt; looks extremely promising, but I was always a fan of NancyFX and wanted to try it out. Subsequently, I was extremely excited when I found out that &lt;a href=&#34;http://nancyfx.org&#34;&gt;NancyFX&lt;/a&gt; would be compatible with Core, and I basically gave myself a reason to use it.&lt;/p&gt;

&lt;p&gt;That reason is a rather small Web API project that I very simply needed to accept &lt;code&gt;POST&lt;/code&gt; requests from two separate web servers/services and provide &lt;code&gt;GET&lt;/code&gt; routes that would be accessed via a SPA (probably &lt;a href=&#34;http://angular.io&#34;&gt;Angular 2&lt;/a&gt;) with some relevant business information that would be coming in from the API&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;For the lazy, TL;DR &amp;ndash; Repository is available on Github: &lt;a href=&#34;https://github.com/nandotech/VSNancyDemo&#34;&gt;https://github.com/nandotech/VSNancyDemo&lt;/a&gt;.  Feel free to clone it, fork it, add, fix &amp;amp; send pull requests if you fancy.&lt;/p&gt;

&lt;p&gt;Moral of the story is that this was incredibly easy to accomplish, especially if you stay on the &amp;ldquo;&lt;a href=&#34;https://github.com/NancyFx/Nancy/wiki/Introduction&#34;&gt;Super Duper Happy Path&lt;/a&gt;&amp;rdquo; as the developers like to put it.  We will only cover the back end service here, possibly saving the Angular 2 portion for another post.&lt;/p&gt;

&lt;p&gt;With Core, we have a few options as it pertains to tooling, it really comes down to personal preference.  You may generate and do everything necessary from the &lt;a href=&#34;https://github.com/dotnet/cli&#34;&gt;command line&lt;/a&gt; and utilize your text editor of choice (in this case, I prefer &lt;a href=&#34;http://code.visualstudio.com/&#34;&gt;VS Code&lt;/a&gt;).  My personal preference is actually still to use the full version of Visual Studio for the C#/.NET coding, though I do like some of the cli templates better.&lt;/p&gt;

&lt;p&gt;Generally, I like to take some parts of ASP.NET web templates to help take care of some boilerplate, but there is some value in doing everything from scratch. Below, we&amp;rsquo;ll explore a few options.&lt;/p&gt;

&lt;p&gt;So, why not both?&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;CLI/Code&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Visual Studio&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;http://i.imgur.com/PhJP72m.png&#34; alt=&#34;.NET Core CLI&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;http://i.imgur.com/HoGGd07.png&#34; alt=&#34;VS Web API&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;http://i.imgur.com/VVHHhQG.png&#34; alt=&#34;VS Code&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;http://i.imgur.com/69T7KsR.png&#34; alt=&#34;Bare WebAPI Proj&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;From here, the direction are basicallly identical regardless which IDE or setup you are attempting to use. I will try to point out differences wherever possible. Also of note, from the &lt;code&gt;dotnet&lt;/code&gt; cli you may use the command &lt;code&gt;dotnet new -t web&lt;/code&gt; to get a full ASP.NET application.  Alternatively, you can also use the &lt;a href=&#34;http://yeoman.io/&#34;&gt;Yeoman&lt;/a&gt; tool that provides several different templates that can be utilized typing &lt;code&gt;yo aspnet&lt;/code&gt; (&lt;a href=&#34;https://docs.asp.net/en/latest/client-side/yeoman.html&#34;&gt;assuming you&amp;rsquo;ve installed yeoman &amp;amp; the aspnet generators&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Regardless which route you go, next step here is our config files.  Every Core project has a &lt;code&gt;project.json&lt;/code&gt; and we will also add an &lt;code&gt;appsettings.json&lt;/code&gt; file where we will inject some static data from as well as database connection string.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;project.json&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;Microsoft.NETCore.App&amp;quot;: {
      &amp;quot;version&amp;quot;: &amp;quot;1.0.1&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;platform&amp;quot;
    },
    &amp;quot;Microsoft.AspNetCore.Diagnostics&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.AspNetCore.Server.IISIntegration&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.AspNetCore.Server.Kestrel&amp;quot;: &amp;quot;1.0.1&amp;quot;,
    &amp;quot;Microsoft.Extensions.Logging.Console&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.AspNetCore.Owin&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.Extensions.Configuration.FileExtensions&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.Extensions.Configuration.Json&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Nancy&amp;quot;: &amp;quot;2.0.0-barneyrubble&amp;quot;,
    &amp;quot;Dapper&amp;quot;: &amp;quot;1.50.2&amp;quot;
  },
  &amp;quot;tools&amp;quot;: {
    &amp;quot;Microsoft.AspNetCore.Server.IISIntegration.Tools&amp;quot;: &amp;quot;1.0.0-preview2-final&amp;quot;
  },
  &amp;quot;frameworks&amp;quot;: {
    &amp;quot;netcoreapp1.0&amp;quot;: {}
  },
  &amp;quot;buildOptions&amp;quot;: {
    &amp;quot;debugType&amp;quot;: &amp;quot;portable&amp;quot;, 
    &amp;quot;emitEntryPoint&amp;quot;: true
  },
  &amp;quot;runtimeOptions&amp;quot;: {
    &amp;quot;configProperties&amp;quot;: {
      &amp;quot;System.GC.Server&amp;quot;: true
    }
  },
  &amp;quot;publishOptions&amp;quot;: {
    &amp;quot;include&amp;quot;: [
      &amp;quot;wwwroot&amp;quot;,
      &amp;quot;web.config&amp;quot;
    ]
  },
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;postpublish&amp;quot;: [ &amp;quot;dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:coreclr%&amp;quot; ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;appsettings.json&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;ConnectionStrings&amp;quot;: {
    &amp;quot;DefaultConnection&amp;quot;: &amp;quot;Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=DemoDb;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=True;ApplicationIntent=ReadWrite;MultiSubnetFailover=False&amp;quot;
  },
    &amp;quot;Greeting&amp;quot;: &amp;quot;A configurable Hello!&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we&amp;rsquo;ll use &lt;code&gt;DefaultConnection&lt;/code&gt; as our DB connection string and will be injecting &lt;code&gt;Greeting&lt;/code&gt; via Dependency Injection as a simple API string response and in a Nancy view, mainly just to show that we can do that. :)&lt;/p&gt;

&lt;p&gt;Depending which app template you used, you may or may not already have a &lt;code&gt;Startup.cs&lt;/code&gt; file in the root of your project. Either way, we want to edit that file to look like so:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Startup.cs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            // All dependency injection will be done in NancyBootstrapper
        }
        // This method gets called by the runtime.
        // We will configure this to use Nancy middleware.
        public void Configure(IApplicationBuilder app)
        {
            // Creating our request pipeline--strictly Nancy middleware
            app.UseOwin(x =&amp;gt; x.UseNancy());
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: see &lt;a href=&#34;https://github.com/NancyFx/Nancy/tree/master/samples/Nancy.Demo.Hosting.Kestrel&#34;&gt;this example&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/jchannon&#34;&gt;Jonathan Channon&lt;/a&gt; from the &lt;code&gt;NancyFX&lt;/code&gt; team for how to keep IConfiguration in your &lt;code&gt;Startup.cs&lt;/code&gt; and pass it into the &lt;code&gt;NancyBootstrapper&lt;/code&gt;. In our case, a) I felt the code was cleaner and easier to understand using the &lt;code&gt;Nancy&lt;/code&gt; DI scheme and b) using the aforementioned method gave me some issues resolving dependencies since I am pulling things in from &lt;code&gt;appSettings.json&lt;/code&gt;.  The example in the link is a full Nancy app running on Kestrel&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At this point, if we define a &lt;code&gt;HomeModule&lt;/code&gt; which is Nancy&amp;rsquo;s default route, equivalent to the &lt;code&gt;HomeController&lt;/code&gt; in MVC, then you will have an API that can handle requests already. While I like to split up these different types of code files into folders, it is not in any way required.&lt;/p&gt;

&lt;p&gt;Below is a very basic module with a &amp;ldquo;Hello World&amp;rdquo; message at the &lt;code&gt;/&lt;/code&gt; route at &lt;code&gt;localhost:5000&lt;/code&gt;. You can also see Nancy returning your current OS (or whatever is hosting the app) by visiting &lt;code&gt;localhost:5000/os&lt;/code&gt;.  Below code also demonstrates how you may write your route definitions in-line (for very short routes) and also within blocks (curly braces) allowing you to write as much code as you need.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;HomeModule.cs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt; public class HomeModule : NancyModule
    {
        public HomeModule()
        {
            Get(&amp;quot;/&amp;quot;, args =&amp;gt; &amp;quot;Hello World&amp;quot;);

            Get(&amp;quot;/os&amp;quot;, x =&amp;gt;
            {
                return System.Runtime.InteropServices.RuntimeInformation.OSDescription;
            });
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will experiment with injecting dependencies using Nancy&amp;rsquo;s built in &lt;code&gt;TinyIoC&lt;/code&gt; and also build a few other modules. We&amp;rsquo;ll include very cursory, somewhat contrived examples, but you will get to also see how &lt;code&gt;async&lt;/code&gt; modules look along with the use of &lt;code&gt;Before&lt;/code&gt; and &lt;code&gt;After&lt;/code&gt; request pipelines in Nancy modules. The same applies for Nancy views, though I will try and provide some explanation and/or guidance with links to point you in the right direction.&lt;/p&gt;

&lt;p&gt;For now, let&amp;rsquo;s pat ourselves on the back: you&amp;rsquo;ve got an API running on &lt;code&gt;NancyFX 2.0&lt;/code&gt; on &lt;code&gt;.NET Core&lt;/code&gt; with 2 Get routes, which you can test and confirm in your browser.  From here, the sky is the limit.  However, back to the matter at hand: we are now configured and ready to go with &lt;code&gt;.NET Core&lt;/code&gt; and &lt;code&gt;Nancy&lt;/code&gt;, and we&amp;rsquo;ve pulled in the dependencies we need for &lt;code&gt;Dapper&lt;/code&gt;. Before we create a database and service to access data from it, let&amp;rsquo;s set up another &lt;code&gt;Module&lt;/code&gt; (think [in &lt;a href=&#34;http://asp.net&#34;&gt;ASP.NET&lt;/a&gt; terms]: &lt;code&gt;Controller&lt;/code&gt;) and explore &lt;a href=&#34;http://docs.asp.net/en/latest/fundamentals/dependency-injection.html&#34;&gt;Dependency&lt;/a&gt; &lt;a href=&#34;https://wildermuth.com/2016/08/07/ASP-NET-Core-Dependency-Injection&#34;&gt;Injection&lt;/a&gt; with &lt;a href=&#34;https://github.com/grumpydev/TinyIoC&#34;&gt;TinyIoC&lt;/a&gt;, which comes baked into &lt;code&gt;Nancy&lt;/code&gt; for us.&lt;/p&gt;

&lt;p&gt;Also, putting aside our SPA for now, what if we wanted to return an &lt;code&gt;index.html&lt;/code&gt; page showing &amp;ldquo;Hello World&amp;rdquo; rather than the current plain text response?&lt;/p&gt;

&lt;p&gt;There are 2 things we need to do:
1. Create an &lt;code&gt;index.html&lt;/code&gt; view with a &lt;code&gt;@Model&lt;/code&gt; element for data from the &lt;code&gt;Controller&lt;/code&gt;
2. Update our &lt;code&gt;HomeModule.cs&lt;/code&gt; &lt;code&gt;GET&lt;/code&gt; Route to render a view.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;
    &amp;lt;h2&amp;gt;@Model&amp;lt;/h2&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;HomeModule.cs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class HomeModule : NancyModule
    {
        public HomeModule()
        {

            Get(&amp;quot;/&amp;quot;, args =&amp;gt;
            {
                
                return View[&amp;quot;index.html&amp;quot;, &amp;quot;Hello World&amp;quot;];
            });
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may be seeing something like this:
&lt;img src=&#34;http://i.imgur.com/94mQKnp.png&#34; alt=&#34;500 Error!&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t worry! You didn&amp;rsquo;t do anything wrong.  If we read into the error message, we see that it seems to be looking in &lt;code&gt;views/Home/&lt;/code&gt; as well as &lt;code&gt;views&lt;/code&gt; and the &lt;code&gt;root&lt;/code&gt; path for several different variations. But we put our &lt;code&gt;index.html&lt;/code&gt; in our &lt;code&gt;views&lt;/code&gt; folder, right? The key here is to notice the &lt;code&gt;&amp;quot;Root Path&amp;quot;&lt;/code&gt; which on my OS as we debug here is set to &lt;code&gt;C:\VSCode\VSNancyNetCore\src\VSNancyDemo\bin\Release\netcoreapp1.0\&lt;/code&gt; &amp;ndash;no wonder we can&amp;rsquo;t find our &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thankfully, this is a simple fix: we simply need to override &lt;code&gt;NancyFX&lt;/code&gt;&amp;rsquo;s default &lt;code&gt;IRootPathProvider&lt;/code&gt;. This is no way prescriptive, but here is the folder structure I choose to utilize for a basic &lt;code&gt;Nancy&lt;/code&gt; project:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/bkgjvNm.png&#34; alt=&#34;Nancy File Structure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The only real &amp;ldquo;definite&amp;rdquo; here is Nancy generally prefers static content be placed in the &lt;code&gt;/Content/&lt;/code&gt; directory for simplicity.  Otherwise, this folder structure is 100% mine (although not particularly creative or anything, just my way or organizing things).  That said, the aforementioned class, one that inherits &lt;code&gt;IRootPathProvider&lt;/code&gt; we will add into our &lt;code&gt;/Helpers/&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;CustomRootPathProvider.cs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public class CustomRootPathProvider : IRootPathProvider
    {
        public string GetRootPath()
        {
            return Directory.GetCurrentDirectory();
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;This will fix our root directory issue&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Awesome.  We&amp;rsquo;re now using &lt;code&gt;NancyFX&lt;/code&gt;&amp;rsquo;s &lt;code&gt;Super-Simple View Engine&lt;/code&gt; or &lt;code&gt;SSVE&lt;/code&gt; for short to render our &lt;code&gt;Model&lt;/code&gt; to our &lt;code&gt;index.html&lt;/code&gt; page. Press &lt;code&gt;F5&lt;/code&gt; or type &lt;code&gt;dotnet run&lt;/code&gt; in your command line to see &amp;ldquo;hello world&amp;rdquo; displayed in HTML coming from your &lt;code&gt;NancyFX&lt;/code&gt; app.&lt;/p&gt;

&lt;p&gt;Since that is out of the way, let&amp;rsquo;s create our &lt;code&gt;IGreeterService&lt;/code&gt; and &lt;code&gt;GreeterService&lt;/code&gt;.  To help show how the Dependency Injection scheme works, this will be a simple interface that has 1 function and the service will simply implement &lt;code&gt;GetGreeting()&lt;/code&gt; which pulls a &amp;ldquo;Greeting&amp;rdquo; variable from our &lt;code&gt;appsettings.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;IGreeterService.cs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public interface IGreeterService
    {
        string GetGreeting();
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;GreeterService.cs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public class GreeterService : IGreeterService
    {
        private string _greeting;

        public GreeterService(IConfiguration config)
        {
            _greeting = config[&amp;quot;Greeting&amp;quot;];
        }

        public string GetGreeting()
        {
            return _greeting;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, in order to take control of our configuration and dependency injection (and have our above sample work properly), we now have to inherit the &lt;code&gt;DefaultNancyBootstrapper&lt;/code&gt; and build our dependencies there. You&amp;rsquo;ll notice I&amp;rsquo;ve moved &lt;code&gt;IConfiguration&lt;/code&gt; and the adding of &lt;code&gt;appsettings.json&lt;/code&gt; into this file instead of in &lt;code&gt;Startup.cs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;CustomBootstrapper.cs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public class CustomBootstrapper : DefaultNancyBootstrapper
    {
        public IConfiguration Configuration;
        public CustomBootstrapper()
        {
            var builder = new ConfigurationBuilder()
                            .SetBasePath(RootPathProvider.GetRootPath())
                            .AddJsonFile(&amp;quot;appsettings.json&amp;quot;)
                            .AddEnvironmentVariables();
            Configuration = builder.Build();
        }
        protected override void ConfigureApplicationContainer(TinyIoCContainer container)
        {
            container.Register&amp;lt;IGreeterService, GreeterService&amp;gt;();
            container.Register(Configuration);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default here, &lt;code&gt;GreeterService&lt;/code&gt; is scoped as a &lt;a href=&#34;http://csharpindepth.com/Articles/General/Singleton.aspx&#34;&gt;&lt;code&gt;Singleton&lt;/code&gt;&lt;/a&gt; and I believe &lt;code&gt;Configuration&lt;/code&gt; is &lt;code&gt;multi-instance&lt;/code&gt; (see: &lt;a href=&#34;https://github.com/NancyFx/Nancy/wiki/Bootstrapping-nancy&#34;&gt;https://github.com/NancyFx/Nancy/wiki/Bootstrapping-nancy&lt;/a&gt; for more info).  As you may also override Request &amp;amp; Application Containers, we can dig into this much further another day.&lt;/p&gt;

&lt;p&gt;To see our &lt;code&gt;GreeterService&lt;/code&gt; in action and &lt;code&gt;TinyIoC&lt;/code&gt; resolving it, let&amp;rsquo;s update our &lt;code&gt;HomeModule.cs&lt;/code&gt; again:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;HomeModule.cs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;        public HomeModule(IGreeterService greeter)
        {
            Get(&amp;quot;/&amp;quot;, args =&amp;gt;
            {
                
                return View[&amp;quot;index.html&amp;quot;, greeter.GetGreeting()];
            });
            
            Get(&amp;quot;/test&amp;quot;, args =&amp;gt; greeter.GetGreeting());

            Get(&amp;quot;/os&amp;quot;, x =&amp;gt;
            {
                return System.Runtime.InteropServices.RuntimeInformation.OSDescription;
            });
        }  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our &lt;code&gt;index.html&lt;/code&gt; is now returning the message labelled &lt;code&gt;&amp;quot;Greeting&amp;quot;&lt;/code&gt; from our &lt;code&gt;appsettings.json&lt;/code&gt; file at the &lt;code&gt;/&lt;/code&gt; route. The &lt;code&gt;/test&lt;/code&gt; route just returns the same thing in plain text to the browser and/or &lt;a href=&#34;https://www.getpostman.com/&#34;&gt;Postman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the sake of length, I&amp;rsquo;m actually going to skip reviewing &lt;code&gt;async&lt;/code&gt;, &lt;code&gt;Before()&lt;/code&gt; and &lt;code&gt;After()&lt;/code&gt; lifetime hooks as well as built-in context logger&amp;ndash;you can still look over how this works in the &lt;code&gt;AsyncModule.cs&lt;/code&gt; within the &lt;a href=&#34;https://github.com/nandotech/VSNancyNetCore/&#34;&gt;repository&lt;/a&gt;. You can run this Get request from your browser and see how it works.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;With all the basics out of the way, including our side foray into using &lt;code&gt;NancyFX&lt;/code&gt; with a View Engine and exploring Dependency Injection, now we&amp;rsquo;re ready to build a database and get &lt;code&gt;Dapper&lt;/code&gt; up and running.&lt;/p&gt;

&lt;p&gt;For this example, I will use my &lt;code&gt;localdb&lt;/code&gt;, specifically &lt;code&gt;(localdb)\\MSSQLLocalDB&lt;/code&gt; which should be just fine.  We are going to assume we have just 2 types (&lt;code&gt;class&lt;/code&gt;) of data and build a simple database to reflect our classes.&lt;/p&gt;

&lt;p&gt;In typical usage, &lt;a href=&#34;https://github.com/StackExchange/dapper-dot-net&#34;&gt;Dapper&lt;/a&gt; expects that you have a connection open, or you may explicitly advise the library to &lt;code&gt;Open&lt;/code&gt; the database connection by calling &lt;code&gt;.Open()&lt;/code&gt; on their extended &lt;code&gt;IDbConnection&lt;/code&gt; interface.  In the interest of keeping code a little more &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;D.R.Y.&lt;/a&gt;, I decided to make a &lt;code&gt;IDbConnectionProvider.cs&lt;/code&gt; and &lt;code&gt;DbConnectionProvider.cs&lt;/code&gt; which will return the &lt;code&gt;IDbConnection&lt;/code&gt; required for our Dapper queries.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;IDbConnectionProvider.cs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public interface IDbConnectionProvider
    {
        IDbConnection Connection { get; }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;DbConnectionProvider.cs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public class DbConnectionProvider : IDbConnectionProvider
    {
        private string connectionString;
        public DbConnectionProvider(IConfiguration config)
        {
            connectionString = config.GetConnectionString(&amp;quot;DefaultConnection&amp;quot;);
        }
        public IDbConnection Connection
        {
            get
            {
                return new SqlConnection(connectionString);
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way any other service or repository we may need to create simply needs a constructor accepting &lt;code&gt;IDbConnectionProvider&lt;/code&gt; and it will have access to the correct &lt;code&gt;IDbConnection&lt;/code&gt; instance. Would also save having to update a bunch of different locations if the variable or connection  type were changed.  That said, we must add the following line to our &lt;code&gt;Bootstrapper&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;container.Register&amp;lt;IDbConnectionProvider, DbConnectionProvider&amp;gt;();  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once again: this is a &lt;code&gt;Singleton&lt;/code&gt; but since the IDbConnection object does not directly control opening/closing DB connections this is perfectly okay. (Thanks &lt;a href=&#34;http://twitter.com/jchannon&#34;&gt;@jchannon&lt;/a&gt; for helping me out here).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see now what we have in our &lt;code&gt;/Data/&lt;/code&gt; folder for classes that need to become database tables. In our app we will have 2 simple data types, &lt;code&gt;Disposition&lt;/code&gt; and &lt;code&gt;Sale&lt;/code&gt; that we&amp;rsquo;ll be able to INSERT into (POST) and also return (GET) some contextual data. Here are the classes below&amp;ndash;without using a database migration tool, we&amp;rsquo;ll just run a &lt;code&gt;.sql&lt;/code&gt; script to create the requisite database.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll be using SQL Server for our example, but remember Dapper supports many different types of databases, from SQLite to Postgres.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sale.cs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public class Sale
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public DateTime Timestamp { get; set; }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Disposition.cs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public class Disposition
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public DateTime Timestamp { get; set; }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which we can translate to:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;CreateDatabase.sql&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE [dbo].[Dispositions](
    [Id] [int] IDENTITY(1,1) NOT NULL,
    [Name] [nvarchar](max) NULL,
    [Description] [nvarchar](max) NULL,
    [Timestamp] datetime NULL,
 CONSTRAINT [PK_Dispositions] PRIMARY KEY CLUSTERED 
(
    [Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

CREATE TABLE [dbo].[Sales](
    [Id] [int] IDENTITY(1,1) NOT NULL,
    [Name] [nvarchar](max) NULL,
    [Description] [nvarchar](max) NULL,
    [Timestamp] datetime NULL,
 CONSTRAINT [PK_Sales] PRIMARY KEY CLUSTERED 
(
    [Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;looks-like-we-re-ready-to-use-dapper-and-interact-with-our-database-from-our-nancyfx-application-now&#34;&gt;Looks like we&amp;rsquo;re ready to use Dapper and interact with our database from our &lt;code&gt;NancyFX&lt;/code&gt; application now.&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll start by creating a simple &lt;code&gt;service&lt;/code&gt; or &lt;code&gt;repository&lt;/code&gt; depending who you ask, and using that to call Dapper functions to interact with our database.  If you&amp;rsquo;re reading this, I&amp;rsquo;m going to assume you&amp;rsquo;re at least a little familiar with SQL, so we won&amp;rsquo;t be going over any of that. Moreover, for this demo, I don&amp;rsquo;t think we&amp;rsquo;ll be doing anything real complicated.  The SQL script above is included in the &lt;a href=&#34;https://github.com/nandotech/VSNancyDemo&#34;&gt;Github Repository&lt;/a&gt; for your convenience.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DispoRepository.cs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public class DispoRepository
    {
        private IDbConnection dbConn;

        public DispoRepository(IDbConnectionProvider _dbConn)
        {
            dbConn = _dbConn.Connection;
        }
        public IEnumerable&amp;lt;Disposition&amp;gt; GetAll()
        {
            using (IDbConnection active = dbConn)
            {
                active.Open();
                return active.Query&amp;lt;Disposition&amp;gt;(&amp;quot;SELECT * FROM Dispositions&amp;quot;);
            }
        }
        public Disposition Get(int id)
        {
            using (IDbConnection active = dbConn)
            {
                active.Open();
                return active.QueryFirst&amp;lt;Disposition&amp;gt;(&amp;quot;SELECT * FROM Dispositions WHERE id = @Id&amp;quot;, new { Id = id });
            }
        }
        public void Add(Disposition dispo)
        {
            string sQuery = &amp;quot;INSERT INTO dbo.Dispositions (Name, Description, Timestamp)&amp;quot;
                + &amp;quot; VALUES(@Name, @Description, @Timestamp)&amp;quot;;
            using (IDbConnection active = dbConn)
            {
                active.Open();
                active.Execute(sQuery, dispo);
            }
        }
        public void Remove(int id)
        {
            using (IDbConnection active = dbConn)
            {
                active.Open();
                active.Execute(&amp;quot;DELETE FROM Dispositions WHERE Id = @Id&amp;quot;, new { Id = id });
            }
        }

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;DispoRepository&lt;/code&gt; above contains some basic functions for interaction with the &lt;code&gt;Dispositions&lt;/code&gt; table we created in &lt;code&gt;SQL Server&lt;/code&gt;.  We have &lt;code&gt;GetAll()&lt;/code&gt;, &lt;code&gt;Get(int id)&lt;/code&gt;, &lt;code&gt;Add(Disposition dispo)&lt;/code&gt;, and &lt;code&gt;Remove(int id)&lt;/code&gt; and predictably they all do exactly what you&amp;rsquo;d expect.  Again for brevity, I will likely leave only the &lt;code&gt;Disposition&lt;/code&gt; Repo &amp;amp; &lt;code&gt;DispoModule&lt;/code&gt; completed with the &lt;code&gt;SaleModule.cs&lt;/code&gt; &amp;amp; implementing a &lt;code&gt;SalesRepository.cs&lt;/code&gt; as an exercise for you.  You may even add a field to relate the two and create a more robust data model.&lt;/p&gt;

&lt;p&gt;I will personally be doing exactly that, as this is basically the barebones/precursor to a very simple closely related application I am working on.  I just really wanted to explore both Nancy &amp;amp; Dapper while I did it.&lt;/p&gt;

&lt;p&gt;That said, here&amp;rsquo;s our &lt;code&gt;DispoModule.cs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DispoModule.cs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public class DispoModule : NancyModule
    {

        public DispoModule(IDbConnectionProvider _dbConn)
            : base(&amp;quot;/dispo&amp;quot;)
        {
            var _repo = new DispoRepository(_dbConn);

            Get(&amp;quot;/&amp;quot;, args =&amp;gt;
            {
                return _repo.GetAll();
            });

            Get(&amp;quot;Id={id}&amp;quot;, args =&amp;gt;
            {
                return _repo.Get(args.id);
            });

            Post(&amp;quot;/Name={name}&amp;amp;Desc={description}&amp;quot;, args =&amp;gt;
            {
                var posted = new Disposition();
                posted.Name = args.Name;
                posted.Description = args.Description;
                posted.Timestamp = DateTime.Now;
                _repo.Add(posted);

                return posted;
            });

            Delete(&amp;quot;Id={id}&amp;quot;, args =&amp;gt;
            {
                _repo.Remove(args.id);
                return $&amp;quot;{args.id} Removed&amp;quot;;
            });
        }

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use your favorite API tester to see the results (the &lt;code&gt;/dispo/&lt;/code&gt; route will not display in your browser, as we saw before this is expected since there is no view associated with it).&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Get Requests&lt;/th&gt;
&lt;th&gt;Post Requests&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;http://i.imgur.com/Q316PoH.png&#34; alt=&#34;GetAll()&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;http://i.imgur.com/blNKGRg.png&#34; alt=&#34;Post New&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;http://i.imgur.com/0qhU561.png&#34; alt=&#34;Get By ID&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;http://i.imgur.com/N7OUbsL.png&#34; alt=&#34;Delete Post&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;There are obviously several strategies you can take, and I was fairly primitive in my argument passing &amp;amp; capturing in these examples, intentionally so.  I didn&amp;rsquo;t want to confuse intent while covering full functionality and everything you should need.&lt;/p&gt;

&lt;p&gt;Along the lines of Dapper, rather than creating &lt;code&gt;Repository&lt;/code&gt; class for each data type, we could also do something much more generic. From creating a single repository that would include all necessary methods for data retrieval app-wide to actually using a &amp;ldquo;Generic Repository&amp;rdquo; pattern to have each data type inherit from a common &lt;code&gt;interface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Anyhow, that was much longer than I intended for it to be.  I did want the walkthrough to be fairly thorough and approachable for those coming into the stack with no prior knowledge, while still providing useful insight for those who have used these technologies together before.&lt;/p&gt;

&lt;p&gt;With that, please direct any questions or comments to me via twitter or any of the links at the bottom of the page, I would love to hear from you. Do you use Dapper and .NET Core (and more specifically, Nancy) in production? Your hobby project?  How do your patterns differ from what I show here?  How could some of this code be improved?  Let me know.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nandotech/VSNancyDemo&#34;&gt;Github Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;lastly&#34;&gt;Lastly:&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;I want to give a huge shout-out and big thank you to the &lt;code&gt;NancyFX&lt;/code&gt; developers.&lt;/strong&gt;  These guys do amazing work for the community &lt;em&gt;for free&lt;/em&gt; and I could not be  more thankful.  On top of that, the &lt;code&gt;NancyFX&lt;/code&gt; community has a &lt;a href=&#34;http://nancyfx.slack.com&#34;&gt;Slack&lt;/a&gt; that you can feel free to join @ &lt;a href=&#34;http://nancyfx.slack.com&#34;&gt;http://nancyfx.slack.com&lt;/a&gt; and ask questions!  Rarely do you find such a friendly and helpful community online these days, and these guys were awesome at answering all my questions and contributing to my understanding of th stack.&lt;/p&gt;

&lt;p&gt;Nonetheless, in no particular order I&amp;rsquo;d like to recognize the following specifically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/thecodejunkie&#34;&gt;Andreas Hakansson aka &amp;ldquo;thecodejunkie&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jchannon&#34;&gt;Jonathan Channon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grumpydev&#34;&gt;Steven Robbins aka &amp;ldquo;grumpydev&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/phillip-haydon&#34;&gt;Phillip Haydon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/khellang&#34;&gt;Kristian Hellang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and lastly, non-Nancy team member but awesome community member:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Sphiecoh&#34;&gt;Sifiso Shezi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have had the pleasure of having direct access to and some interaction with just about every single one of these guys and it has been absolutely invaluable.  Again, all are encouraged to join the community, drop in Slack and ask questions! This is an awesome project and the community behind it is just as awesome as it grows and matures. :)&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Happy Halloween!</title>
      <link>https://nandotech.github.io/post/2016-10-20-happy-halloween/</link>
      <pubDate>Thu, 20 Oct 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://nandotech.github.io/post/2016-10-20-happy-halloween/</guid>
      <description>

&lt;h2 id=&#34;it-has-been-a-little-while-since-our-last-post&#34;&gt;It has been a little while since our last post,&lt;/h2&gt;

&lt;p&gt;and though I am currently working on a long &lt;em&gt;awesome&lt;/em&gt; post that should help out a ton of people (about halfway done), it was feeling lonely and quiet over here.&lt;/p&gt;

&lt;p&gt;So, without any further adieu:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Octocat Pumpkin&lt;/em&gt;&lt;/strong&gt; carved with &amp;lt;3 by &lt;a href=&#34;http://www.nandotech.com&#34;&gt;NandoTech&amp;rsquo;s&lt;/a&gt; VP of Technology &lt;a href=&#34;https://twitter.com/arronmayers&#34;&gt;@ArronMayers&lt;/a&gt; in honor of the &lt;a href=&#34;https://www.github.com&#34;&gt;GitHub&lt;/a&gt; &lt;a href=&#34;https://octodex.github.com/&#34;&gt;Octocat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;imgur-embed-pub&#34; lang=&#34;en&#34; data-id=&#34;KMZns1w&#34;&gt;&lt;a href=&#34;//imgur.com/KMZns1w&#34;&gt;GitHub Halloween Pumpkin&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&#34;//s.imgur.com/min/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;In case you&amp;rsquo;re wondering, the upcoming post will cover Building an API with &lt;a href=&#34;http://dot.net&#34;&gt;.Net Core&lt;/a&gt;, &lt;a href=&#34;http://www.nancyfx.org&#34;&gt;NancyFX 2.0&lt;/a&gt; and &lt;a href=&#34;https://github.com/stackexchange/dapper-dot-net&#34;&gt;Dapper.NET&lt;/a&gt;. I will also try and cover some basic Nancy concepts and how it and &lt;a href=&#34;http://asp.net&#34;&gt;ASP.NET&lt;/a&gt; differ, as well as why I like Nancy so much.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular 2 Crash Course</title>
      <link>https://nandotech.github.io/post/2016-10-07-angular-crash-course/</link>
      <pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://nandotech.github.io/post/2016-10-07-angular-crash-course/</guid>
      <description>

&lt;p&gt;&lt;em&gt;PSA: Skip to the &lt;strong&gt;TL;DR&lt;/strong&gt; for list of resources&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;so-due-to-forces-of-nature-beyond-our-control-specifically-hurricane-matthew&#34;&gt;So, due to forces of nature beyond our control (specifically Hurricane Matthew),&lt;/h2&gt;

&lt;p&gt;the &lt;a href=&#34;http://ftlauderdale.ng-learn.com&#34;&gt;Angular 2 Workshop&lt;/a&gt; we were registered for this Thursday &amp;amp; Friday, October 6th &amp;amp; 7th with both &lt;a href=&#34;https://johnpapa.net/&#34;&gt;John Papa&lt;/a&gt; and &lt;a href=&#34;https://www.codewithdan.com&#34;&gt;Dan Wahlin&lt;/a&gt; was cancelled. Thankfully for us South Floridians, &lt;a href=&#34;http://www.nytimes.com/2016/10/07/us/hurricane-matthew.html?_r=0&#34;&gt;Hurricane Matthew&lt;/a&gt; narrowly avoided a direct hit with us southernmost residents and the tri-county area of Dade, Broward &amp;amp; Palm Beach was mostly unaffected.&lt;/p&gt;

&lt;h4 id=&#34;that-said-we-were-incredibly-lucky-and-many-residents-in-the-central-and-northern-regions-of-our-state-are-not-nearly-as-lucky-areas-near-and-around-daytona-beach-fl-i-believe-suffered-the-brunt-of-it-and-our-best-wishes-are-with-the-most-affected-communities&#34;&gt;That said, we were incredibly lucky, and many residents in the central and northern regions of our state are not nearly as lucky.  Areas near and around Daytona Beach, FL I believe suffered the brunt of it and our best wishes are with the most affected communities.&lt;/h4&gt;

&lt;p&gt;That&amp;rsquo;s not even saying anything in regards to the rest of the Carribean like Cuba, Haiti &amp;amp; Jamaica who suffered through the grand &lt;a href=&#34;https://weather.com/news/news/hurricane-matthew-haiti-latest-news&#34;&gt;majority of Matthew&amp;rsquo;s wrath&lt;/a&gt; and will be in recovery mode for quite a while.  I wish I knew a good charity, because this is where I would link and recommend some.  If someone cares to enlighten me, I will update this post.&lt;/p&gt;

&lt;h2 id=&#34;workshop-or-not&#34;&gt;&lt;strong&gt;Workshop Or Not:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Our &lt;em&gt;biggest issue&lt;/em&gt; and concern with missing out on this conference is really that we were 100% &lt;strong&gt;planning on using &lt;a href=&#34;https://angular.io&#34;&gt;Angular 2&lt;/a&gt; as the front end framework&lt;/strong&gt; for our &lt;em&gt;Project Armadillo&lt;/em&gt;.  I also even have a couple of small WebAPI apps fleshed out with no front end in &lt;em&gt;anticipation&lt;/em&gt;, awaiting our 2nd such workshop with John &amp;amp; Dan (we saw them during Fall 2015 &lt;a href=&#34;http://www.DevIntersection.com&#34;&gt;DevIntersection&lt;/a&gt;) before getting started and really digging into the framework.&lt;/p&gt;

&lt;p&gt;The aforementioned cancellation due to &lt;em&gt;Hurricane Matthew&lt;/em&gt; has now put us at quite a crossroads with a bit of a decision to make.  To a certain degree, absolutely nothing has changed and we could still use Angular 2. An alternative (which appeals less to me, but more to my coding partner) is to simply use the &lt;a href=&#34;https://dot.net&#34;&gt;ASP.NET Core&lt;/a&gt; Razor View Engine and avoid messing with more new frameworks, technologies as well as moving parts.&lt;/p&gt;

&lt;p&gt;We were extremely excited (especially with Angular 2 Final&amp;rsquo;s recent release) to get Dan &amp;amp; John&amp;rsquo;s crash course, and more importantly, have access to these two of the community&amp;rsquo;s foremost experts on our entire technology stack. This made us confident that even with my partner&amp;rsquo;s minimal Angular exposure we would be able to quickly get it together.&lt;/p&gt;

&lt;p&gt;Now this all isn&amp;rsquo;t going to happen, and it does no one any good to cry over spilled milk&amp;hellip;So the crash course is up to us. What follows is my &lt;strong&gt;&amp;ldquo;Getting Started w/ Angular 2 Crash Course&amp;rdquo;&lt;/strong&gt;, or my compilation of resources, walkthroughs, blog posts &amp;amp; some paid content like &lt;a href=&#34;https://www.pluralsight.com&#34;&gt;Pluralsight Videos&lt;/a&gt;, &lt;a href=&#34;http://www.codeschool.com&#34;&gt;Code School&lt;/a&gt; and anything else I could find to help get started with Angular 2&amp;rsquo;s Final release.&lt;/p&gt;

&lt;h1 id=&#34;tl-dr&#34;&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&#34;getting-started-w-angular-2-crash-course&#34;&gt;&lt;strong&gt;&lt;strong&gt;Getting Started w/ Angular 2 Crash Course&lt;/strong&gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&#34;ultimate-compilation&#34;&gt;&lt;strong&gt;Ultimate compilation&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;The Basics/Getting Started&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As web developers, we will assume some familiarity with JavaScript&lt;/li&gt;
&lt;li&gt;Angular 2 has gone the way of many frameworks and chosen to leverage &lt;a href=&#34;http://typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt;, encouraging you to use it to build your ng2 apps.&lt;/li&gt;
&lt;li&gt;First order of business is familiarizing yourself with TypeScript, which I will not detail too much here, but the main documentation @ &lt;a href=&#34;http://www.typescriptlang.org/docs/tutorial.html&#34;&gt;http://www.typescriptlang.org/docs/tutorial.html&lt;/a&gt; is very good and thorough&lt;/li&gt;
&lt;li&gt;Get your feet wet and use the &lt;a href=&#34;http://www.typescriptlang.org/play/index.html&#34;&gt;TypeScript Playground&lt;/a&gt; to see how some TypeScript will transpile down into ES5 JavaScript.&lt;/li&gt;
&lt;li&gt;If you know some TypeScript and are familiar with web constructs, start below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Introducing Angular 2&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Again here we&amp;rsquo;ll start at the &lt;a href=&#34;https://angular.io/docs/ts/latest/quickstart.html#!#prereq&#34;&gt;Official Angular 2 Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The link above is to the Angular 2 quickstart

&lt;ul&gt;
&lt;li&gt;This guide takes you through Creating your project, your first component, bootstrapping your application, installing all your dependencies and getting up and running&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;This is an awesome start, but for a deeper understanding of the concepts and the framework as a whole, check these out:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Pluralsight&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://app.pluralsight.com/library/courses/angular-2-getting-started/table-of-contents&#34;&gt;Angular 2: Getting Started&lt;/a&gt; by &lt;a href=&#34;https://www.twitter.com/DeborahKurata&#34;&gt;Deborah Kurata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://app.pluralsight.com/library/courses/angular-2-first-look/table-of-contents&#34;&gt;Angular 2 First Look&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/JohnPapa&#34;&gt;John Papa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://app.pluralsight.com/library/courses/angular-2-first-look/table-of-contents&#34;&gt;Play By Play: Angular2/RxJS/HTTP&lt;/a&gt; by John Papa &amp;amp; &lt;a href=&#34;https://twitter.com/DanWahlin&#34;&gt;Dan Wahlin&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Code School&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.codeschool.com/courses/accelerating-through-angular-2&#34;&gt;Accelerating Through Angular 2&lt;/a&gt; by &lt;a href=&#34;https://www.twitter.com/greggpollack&#34;&gt;Gregg Pollack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Egghead.io&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://egghead.io/technologies/angular2&#34;&gt;Angular 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Blogs/Resources&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://vsavkin.com/writing-angular-2-in-typescript-1fa77c78d8e8#.szbkd4gw4&#34;&gt;Why TypeScript?&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/victorsavkin&#34;&gt;Victor Savkin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vsavkin.com/the-core-concepts-of-angular-2-c3d6cbe04d04#.mcjjar9sc&#34;&gt;Core Concepts of Angular 2&lt;/a&gt; by Victor Savkin&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.thoughtram.io/angular/2016/09/15/angular-2-final-is-out.html&#34;&gt;Angular 2 Final Resource List&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/PascalPrecht&#34;&gt;Pascal Precht&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/timjacobi/angular2-education&#34;&gt;Angular 2 Education Curated List&lt;/a&gt; by &lt;a href=&#34;https://github.com/timjacobi/&#34;&gt;Tim Jacobi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://angular.io/docs/ts/latest/guide/style-guide.html&#34;&gt;Angular 2 Style Guide&lt;/a&gt; by John Papa&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2&#34;&gt;Angular 2 Snippets by John Papa&lt;/a&gt; or &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=danwahlin.angular2-snippets&#34;&gt;by Dan Wahlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Blogs with consistently awesome ng2 content:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vsavkin.com&#34;&gt;Victor Savkin&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://johnpapa.net&#34;&gt;John Papa&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.thoughtram.io/&#34;&gt;Pascal Precht&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.codewithdan.com&#34;&gt;Dan Wahlin&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://angularjs.blogspot.com/&#34;&gt;AngularJS Blog&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Putting it all together&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://angular.io/docs/ts/latest/tutorial/&#34;&gt;Tutorial: Angular 2 Docs Tour of Heroes&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Directly from the ng2 team, this tutorial moves pretty quick but covers all the basics you need to get up and running up through some Routing and calling HTTP services.&lt;/li&gt;
&lt;li&gt;This does expect you have some prior knowledge of &lt;a href=&#34;https://typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt; and at have gotten through the &lt;a href=&#34;https://angular.io/docs/ts/latest/quickstart.html&#34;&gt;Angular 2 Quick Start&lt;/a&gt; picking up where it left off&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Slides: &lt;a href=&#34;http://codewithdan.me/angular2-aspnet-core&#34;&gt;Angular 2 and ASP.NET Core&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Many thanks and praises to the awesome &lt;a href=&#34;https://twitter.com/DanWahlin&#34;&gt;Dan Wahlin&lt;/a&gt; for these Slides&lt;/li&gt;
&lt;li&gt;Helps to understand some of the &amp;ldquo;guts&amp;rdquo; or innards of Angular 2 in a basic visual way as well as providing real-world example and use creating an app that calls a real web service&lt;/li&gt;
&lt;li&gt;Along with his quickstart projects, I found most useful his repo (fully updated to latest versions) of an &lt;a href=&#34;https://dot.net&#34;&gt;ASP.NET Core&lt;/a&gt; WebAPI and fully functional Angular 2 front end that includes examples of all types of requests&lt;/li&gt;
&lt;li&gt;Full repo: &lt;a href=&#34;https://github.com/DanWahlin/CoreWebAPIAndAngular&#34;&gt;https://github.com/DanWahlin/CoreWebAPIAndAngular&lt;/a&gt; and just follow the instructions he&amp;rsquo;s provided.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/johnpapa/angular2-go&#34;&gt;Angular2-Go&lt;/a&gt;, a super-simple barebones Angular2 App by John Papa featuring 1 module with 2 routes&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;John Papa&amp;rsquo;s &lt;a href=&#34;https://github.com/johnpapa/angular2-tour-of-heroes&#34;&gt;Tour of Heroes Repo&lt;/a&gt; which has his implementation of the Official Docs Tutorial&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For those migrating existing 1.x apps, &lt;a href=&#34;https://twitter.com/josepheames&#34;&gt;Joseph Eames&lt;/a&gt; Pluralsight course on &lt;a href=&#34;https://app.pluralsight.com/courses/migrating-applications-angular-2&#34;&gt;Migrating to Angular 2&lt;/a&gt; is probably the best resource I have come across.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Also, &lt;a href=&#34;https://dev.to/adventuresinangular/112-aia-upgrading-from-angular-1x-to-angular-2&#34;&gt;Adventures in Angular Podcast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.sitepoint.com/angular-2-tutorial/&#34;&gt;Creating a CRUD App with Angular CLI&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/toddmotto&#34;&gt;Todd Motto&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jvandemo&#34;&gt;Jurgen Van der Moere&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;phew-that-was-longer-than-expected&#34;&gt;Phew, That was longer than expected.&lt;/h1&gt;

&lt;p&gt;Nonetheless, I feel like you can never have too many &lt;strong&gt;good examples&lt;/strong&gt; or posts showing different styles of implementations of Angular 2. For our part, we will likely read Victor Savkin&amp;rsquo;s listed post above and then cherry-pick some of the resources in the &amp;ldquo;resource list&amp;rdquo;-style blog posts to round out our knowledge.&lt;/p&gt;

&lt;p&gt;From there, we move into the &lt;strong&gt;&amp;ldquo;Putting it All Together&amp;rdquo;&lt;/strong&gt; section and go through some of the code samples and best practices. If you&amp;rsquo;ve taken the time to understand all the Angular 2 concepts thus far you will be well on your way. Part of &lt;em&gt;putting it all together&lt;/em&gt; also means starting to put together your own modules/components and just jumping in to get your feet wet.&lt;/p&gt;

&lt;p&gt;I am a strong proponent of clean coding and best practices, but I have also found that the greatest value and the most deeply ingrained learning takes place when you are implementing your own solutions.&lt;/p&gt;

&lt;p&gt;Immediately after getting what I think I need from the &lt;strong&gt;Putting it All Together&lt;/strong&gt; section&amp;ndash;next step is we plan to use Angular 2 to build a simple front end dashboard for an &lt;a href=&#34;https://dot.net&#34;&gt;ASP.NET Core&lt;/a&gt; API project running with the &lt;a href=&#34;http://www.nancyfx.org&#34;&gt;NancyFx&lt;/a&gt; framework.  Using RxJS &amp;amp; Observables + Http in Angular 2 (as per some of the resources above) I&amp;rsquo;m hoping to provide a rich SPA showing some key performance indicators in real time, polling data from 2 disparate web-based systems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenfield Applications (Part 1, Project Armadillo)</title>
      <link>https://nandotech.github.io/post/2016-10-02-greenfield-applications/</link>
      <pubDate>Sun, 02 Oct 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://nandotech.github.io/post/2016-10-02-greenfield-applications/</guid>
      <description>

&lt;h4 id=&#34;there-s-something-whimsical-about-greenfield-applications&#34;&gt;There&amp;rsquo;s something whimsical about Greenfield applications.&lt;/h4&gt;

&lt;p&gt;The feeling of complete freedom over architecture decisions. The drawn out, sometimes heated debates concerning the most minute of details. Javascript frameworks.  &lt;a href=&#34;reactjs.org&#34;&gt;React&lt;/a&gt;, no&amp;ndash;let&amp;rsquo;s use &lt;a href=&#34;http://angular.io&#34;&gt;Angular&lt;/a&gt;!  Better yet, let&amp;rsquo;s use Anguar 2 because that&amp;rsquo;s got to be better than 1, right?&lt;/p&gt;

&lt;p&gt;All kidding aside, the feeling of freedom of laying out and choosing technologies and how they will be distributed, hosted &amp;amp; supported is pretty awesome.&lt;/p&gt;

&lt;p&gt;To be &lt;em&gt;perfectly honest&lt;/em&gt;, we&amp;rsquo;ve probably put off this exact project for many months.  Between semi-pending projects hanging over our heads and some existential crises, we spent some time not making much progress.  This is something we&amp;rsquo;ve known our clients could use for a long time, but we didn&amp;rsquo;t pull the trigger.&lt;/p&gt;

&lt;p&gt;Being .NET developers, we have been closely following the .NET core and it&amp;rsquo;s developments.  We have also very much enjoyed and embraced &lt;a href=&#34;http://typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt; and dabbled in &lt;a href=&#34;http://nativescript.org&#34;&gt;NativeScript&lt;/a&gt;, which further interested us in Angular 2.&lt;/p&gt;

&lt;p&gt;It feels like the perfect storm.  Now that .NET Core was released as 1.0 and then even patched to 1.0.1, I was ready. To my utter joy and surprise, the Angular team then announces Angular 2 Final.&lt;/p&gt;

&lt;h3 id=&#34;all-that-said-this-post-was-about-greenfield-apps-right&#34;&gt;All that said, this post was about Greenfield apps, right?&lt;/h3&gt;

&lt;p&gt;So without further ado, here is our tentative model &amp;amp; deployment plan for what we&amp;rsquo;ve codenamed &lt;strong&gt;Project Armadillo &lt;em&gt;1.0 alpha&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;development-server-technologies&#34;&gt;Development/Server Technologies:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/cloud-platform/sql-server&#34;&gt;SQL Server 2016&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Love the new &lt;a href=&#34;https://blogs.msdn.microsoft.com/jocapc/2015/05/16/json-support-in-sql-server-2016/&#34;&gt;Json data type&lt;/a&gt; which we will leverage heavily&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dot.net&#34;&gt;ASP.NET Core 1.0&lt;/a&gt; Web API

&lt;ul&gt;
&lt;li&gt;Although &lt;a href=&#34;https://docs.asp.net/en/latest/mvc/controllers/index.html&#34;&gt;MVC&lt;/a&gt; made both MVC &amp;amp; WebAPI controllers derive from the same class, ASP.NET is planned to be used explicitly as a back-end web service&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.efproject.net/en/latest/intro.html&#34;&gt;Entity Framework Core 1.0&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;for majority of data access/CRUD)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/StackExchange/dapper-dot-net&#34;&gt;Dapper.NET&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;for SQL-intensive returns &amp;amp; complex queries&lt;/li&gt;
&lt;li&gt;I imagine there may be several composing and/or decomposing JSON data&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.newtonsoft.com/json&#34;&gt;JSON.NET&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;If necessary for further serialization capabilities&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://redis.io&#34;&gt;Redis&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;For any caching mechanisms &amp;amp; needs (haven&amp;rsquo;t planed this out)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/StackExchange/StackExchange.Redis&#34;&gt;StackExchange.Redis&lt;/a&gt; to manage connections&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;deployment-decisions&#34;&gt;Deployment Decisions&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;MOSTLY TBD&amp;hellip;&lt;/li&gt;
&lt;li&gt;The only thing we are certain of is we will be running kestrel, but it will be either behind IIS or NGINX, something we have not decided on.&lt;/li&gt;
&lt;li&gt;There is the tertiary option of running any/all of these things on Docker now that they are fully supported (other than SQL Server, which we have servers to run on)&lt;/li&gt;
&lt;li&gt;We have plenty of in-house infrastructure on which the bulk of this software will run.

&lt;ul&gt;
&lt;li&gt;We may utilize &lt;a href=&#34;http://www.azure.com&#34;&gt;Azure&lt;/a&gt; for some fail-safe or high-availability functionality&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;front-end-framework-design-decisions&#34;&gt;Front End Framework/Design Decisions&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Still finalizing on this front and we will see a part 2 of this blog post.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Dot Net Core 1.0.1 &amp; Semantic Versioning</title>
      <link>https://nandotech.github.io/post/2016-09-21-dot-net-core-1_0_1/</link>
      <pubDate>Wed, 21 Sep 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://nandotech.github.io/post/2016-09-21-dot-net-core-1_0_1/</guid>
      <description>

&lt;p&gt;This past week &lt;a href=&#34;https://www.youtube.com/watch?v=7vKfhe6Zs_s&#34;&gt;marked the first official patch update&lt;/a&gt; since &lt;a href=&#34;http://dot.net&#34;&gt;.NET Core&lt;/a&gt;&amp;rsquo;s initial release.  Naturally, the version number we have jumped up to is &lt;code&gt;1.0.1&lt;/code&gt;.  If you spent any time with the beta&amp;rsquo;s and rc1-8, let me forewarn you now: &lt;strong&gt;DO NOT go open &lt;code&gt;project.json&lt;/code&gt; and edit every single reference up to &lt;code&gt;1.0.1&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Firstly, in a basic &lt;em&gt;Hello World&lt;/em&gt; or a &lt;em&gt;Console App&lt;/em&gt;, the declaration the &lt;code&gt;.NET Core&lt;/code&gt; version has changed very slightly.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;frameworks&amp;quot;: {
  &amp;quot;netcoreapp1.0&amp;quot;: {
    &amp;quot;dependencies&amp;quot;: {
      &amp;quot;Microsoft.NETCore.App&amp;quot;: {
        &amp;quot;version&amp;quot;: &amp;quot;1.0.1&amp;quot;
      }
    }
  } 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a while now (let&amp;rsquo;s say since the release of &lt;code&gt;1.0.0&lt;/code&gt;) we have known that Microsoft &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/articles/core/versions/&#34;&gt;plans on using Semantic Versioning&lt;/a&gt; in order to simplify and further adopt some software best practices into their own package. See Microsoft&amp;rsquo;s explanation above or visit &lt;a href=&#34;http://semver.org&#34;&gt;semver.org&lt;/a&gt; to learn more about it.&lt;/p&gt;

&lt;p&gt;In short, the idea of Semantic Versioning is all packages are versioned as follows: &lt;code&gt;major.minor.patch&lt;/code&gt;.  In the case of .NET Core, this was a patch update (&lt;em&gt;mainly&lt;/em&gt; to patch a vulnerability in System.Mvc).  You can see the issue and advisory &lt;a href=&#34;https://github.com/aspnet/Announcements/issues/203&#34;&gt;on GitHub&lt;/a&gt; and affected packages.&lt;/p&gt;

&lt;p&gt;It is extremely recommended to update the necessary packages and runtime, as there are a few other &lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2016/09/13/announcing-september-2016-updates-for-net-core-1-0/&#34;&gt;minor updates&lt;/a&gt; including fixing &lt;a href=&#34;https://github.com/dotnet/coreclr/issues/6016&#34;&gt;some Linux&lt;/a&gt; &lt;a href=&#34;https://github.com/dotnet/coreclr/issues/5837&#34;&gt;4.6 segfaults&lt;/a&gt;. Beyond that, the  most release notes seem to belong to EF Core which has several packages updated to version &lt;code&gt;1.0.1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One important thing to know and understand, however: you are in no way &lt;em&gt;REQUIRED&lt;/em&gt; to upgrade. The actual &lt;em&gt;idea&lt;/em&gt; behind the power of semantic versioning is that these patch upgrades (any update in the 1.0.&lt;em&gt;x&lt;/em&gt; portion) should contain &lt;strong&gt;ZERO&lt;/strong&gt; breaking changes.  In fact, if you have a working application that &lt;code&gt;1.0.1&lt;/code&gt; breaks, then you should absolutely submit an issue on &lt;a href=&#34;https://github.com/dotnet/&#34;&gt;GitHub&lt;/a&gt; as this should not be the case.&lt;/p&gt;

&lt;p&gt;This is where things get interesting.  Remember when I said  &amp;ldquo;do not edit every single reference in &lt;code&gt;project.json&lt;/code&gt; to &lt;code&gt;1.0.1&lt;/code&gt;&amp;rdquo;? Well, apparently &lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/&#34;&gt;Semantic Versioning&lt;/a&gt; has its pros and cons (see that link for Microsoft&amp;rsquo;s explanation).&lt;/p&gt;

&lt;p&gt;Interestingly (and awesome-ly) you are also perfectly capable of running .NET &lt;code&gt;1.0.0&lt;/code&gt; and &lt;code&gt;1.0.1&lt;/code&gt; side by side.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/9rIac3O.png&#34; alt=&#34;NETCoreApp&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can see installing 1.0.1 does not wipe out 1.0.0, but my &amp;ldquo;active&amp;rdquo; runtime has been updated, visible from running &lt;code&gt;dotnet --info&lt;/code&gt; in my command line.  So in reality here, we have an update to the &lt;em&gt;runtime&lt;/em&gt; &lt;strong&gt;and&lt;/strong&gt; the &lt;em&gt;SDK&lt;/em&gt;&amp;ndash;which, note, is &lt;a href=&#34;https://github.com/dotnet/cli/releases&#34;&gt;still in preview&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Seems simple enough, right?  Here comes the confusion.&lt;/p&gt;

&lt;p&gt;If you are in your command line after upgrading to &lt;code&gt;1.0.1&lt;/code&gt; with tooling &lt;code&gt;1.0.0-preview2-003131&lt;/code&gt;, you can scaffold a web app using &lt;code&gt;dotnet new -t web&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Your process should look something like this:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command Line&lt;/th&gt;
&lt;th&gt;Web Browser&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;http://i.imgur.com/VHYCIMm.png&#34; alt=&#34;Core 1.0.1 WebApp&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;http://i.imgur.com/256fvZ0.png&#34; alt=&#34;ASP.NET Core Debug&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Or in order for your cmd line arguments:&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mkdir NewDotNet101&lt;/code&gt; then&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd NewDotNew101&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dotnet new -t web&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;You now should see the full directory structure as shown above.&lt;/td&gt;
&lt;td&gt;Almost ready to run.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dotnet restore&lt;/code&gt; (this may take a few minutes)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dotnet run&lt;/code&gt; then will run the app by default on &lt;em&gt;Port 5000&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So let&amp;rsquo;s take a look at the full &lt;code&gt;project.json&lt;/code&gt; file (shortened for readability) that we see now. Ironically, this is also exactly where the confusion comes in.  After seeing the full platform version change to &lt;code&gt;&amp;quot;version&amp;quot;: &amp;quot;1.0.1&amp;quot;&lt;/code&gt;, as you begin to scroll you may happen upon some confusion.&lt;/p&gt;

&lt;p&gt;While the full framework and runtime has received a &lt;em&gt;patch upgrade&lt;/em&gt;, as we read through the packages below you can see that &lt;strong&gt;NOT EVERY PACKAGE&lt;/strong&gt; has been upgraded to &lt;code&gt;1.0.1&lt;/code&gt;.  In fact, only a small subset of all the .NET Core &amp;amp; &lt;a href=&#34;http://asp.net&#34;&gt;ASP.NET&lt;/a&gt; Core libraries have updated to &lt;code&gt;1.0.1&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;userSecretsId&amp;quot;: &amp;quot;aspnet-WebApplication-0799fe3e-6eaf-4c5f-b40e-7c6bfd5dfa9a&amp;quot;,

  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;Microsoft.NETCore.App&amp;quot;: {
      &amp;quot;version&amp;quot;: &amp;quot;1.0.1&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;platform&amp;quot;
    },
    &amp;quot;Microsoft.AspNetCore.Authentication.Cookies&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.AspNetCore.Diagnostics&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.AspNetCore.Identity.EntityFrameworkCore&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.AspNetCore.Mvc&amp;quot;: &amp;quot;1.0.1&amp;quot;,
    &amp;quot;Microsoft.AspNetCore.Razor.Tools&amp;quot;: {
      &amp;quot;version&amp;quot;: &amp;quot;1.0.0-preview2-final&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;build&amp;quot;
    },
    &amp;quot;Microsoft.AspNetCore.Routing&amp;quot;: &amp;quot;1.0.1&amp;quot;,
    &amp;quot;Microsoft.AspNetCore.Server.IISIntegration&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.AspNetCore.Server.Kestrel&amp;quot;: &amp;quot;1.0.1&amp;quot;,
    &amp;quot;Microsoft.AspNetCore.StaticFiles&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.EntityFrameworkCore.Sqlite&amp;quot;: &amp;quot;1.0.1&amp;quot;,
    &amp;quot;Microsoft.EntityFrameworkCore.Tools&amp;quot;: {
      &amp;quot;version&amp;quot;: &amp;quot;1.0.0-preview2-final&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;build&amp;quot;
    },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, honestly, I initially read/saw this and I basically just said &amp;ldquo;OK&amp;rdquo;. These days, with the trends in web dev, plus being somewhat accustomed to npm package versioning, NuGet, etc&amp;ndash;it really didn&amp;rsquo;t sound all that crazy to me.  Thankfully for us developers, there are people looking out for and advocating for developers and developer productivity. In this case, I&amp;rsquo;m referring to &lt;a href=&#34;http://www.hanselman.com/&#34;&gt;Scott Hanselman&lt;/a&gt; (&lt;a href=&#34;https://twitter.com/shanselman&#34;&gt;@shanselman&lt;/a&gt; on Twitter) from the Microsoft ASP.NET team.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&#34;https://youtu.be/7vKfhe6Zs_s?t=40m00s&#34;&gt;September 13th ASP.NET Community Standup&lt;/a&gt;, Scott makes the argument that we as developers need this type of upgrade automated or at least an ability to just type/hit a button and &amp;ldquo;Upgrade to LTS&amp;rdquo; or &amp;ldquo;Upgrade to FTS&amp;rdquo; or &amp;ldquo;Upgrade to Latest&amp;rdquo; (bleeding edge).  In short, Scott makes 3 quick &amp;amp; simple points that landed me squarely on his side of the fence.&lt;/p&gt;

&lt;p&gt;Scott argues that this style of &lt;em&gt;manually upgrading&lt;/em&gt; (e.g., editing .json files extremely carefully) is completely untenable. Specifically, he feels that it is something that must be figured out because currently the process is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Manual&lt;/li&gt;
&lt;li&gt;Complicated&lt;/li&gt;
&lt;li&gt;Problematic for humans&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Regardless of my finding this particular upgrade fairly painless, I absolutely see his point and understand exactly how quickly version numbers will begin to climb out of hand becomining impossible to keep track or remember which patch what package should be on.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t think I can point to anyone who has solved this problem in any sort of decent manner.  Scott also mentions how this is a real non-trivial issue. If you have any experience in the &lt;a href=&#34;http://nodejs.org&#34;&gt;Node ecosystem&lt;/a&gt;, you can understand how problematic this can get, and just how quickly.&lt;/p&gt;

&lt;p&gt;It will be very interesting to see what the Microsoft .NET Core team comes up with. On the same standup, &lt;a href=&#34;https://github.com/Eilon&#34;&gt;Eilon Lipton&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/condrong&#34;&gt;Glenn Condron&lt;/a&gt; accompany Scott &amp;amp; &lt;a href=&#34;https://twitter.com/jongalloway&#34;&gt;Jon Galloway&lt;/a&gt; whilst &lt;a href=&#34;https://twitter.com/DamianEdwards&#34;&gt;Damian Edwards&lt;/a&gt; is on vacation (though he does appear to still be watching the Community Standups ;)).&lt;/p&gt;

&lt;p&gt;Eilon actually mentions a tool they had attempted to write to do &lt;em&gt;exactly&lt;/em&gt; what Scott was alluding to in terms of an upgrade tool or an automated way to update all the necessary packages without any manual process. Unfortunately for us, as of now that is still being worked on, so manual updates it is!&lt;/p&gt;

&lt;p&gt;I have closely followed .NET Core&amp;rsquo;s progress and began learning way back in rc4 and 5. I chose to leave it alone for a while, waiting for final release. Now, we are here, and we are ready.  I &lt;em&gt;absolutely love&lt;/em&gt; most everything that&amp;rsquo;s been done with the framework in terms of design decisions and am extremely excited to begin building and using in production.&lt;/p&gt;

&lt;h3 id=&#34;side-note-call-to-action-for-any-and-all-open-source-contributors-out-there&#34;&gt;Side note: Call to action for any and all Open Source contributors out there.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Especially if you are a user of &lt;code&gt;log4net&lt;/code&gt; or  would like to see it on .NET Core&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://apache.org&#34;&gt;&lt;em&gt;The Apache Software Foundation&lt;/em&gt;&lt;/a&gt; needs &lt;strong&gt;HELP&lt;/strong&gt;.  Apache &lt;a href=&#34;http://logging.apache.org&#34;&gt;log4net&lt;/a&gt; is a very robust logging framework that was born out of &lt;a href=&#34;http://logging.apache.org/log4j/2.x/&#34;&gt;log4j&lt;/a&gt; and is extremely powerful. I, myself, have used it as my logging solution in several projects and continue to do so in some ASP.NET 4.5 &amp;amp; 4.6 solutions.  Apache has issued a public &lt;a href=&#34;https://blogs.apache.org/logging/entry/apache_log4net_needs_help&#34;&gt;call for arms&lt;/a&gt; from the community, especially those of us who still use log4net as their preferred framework.&lt;/p&gt;

&lt;p&gt;Check out Apache&amp;rsquo;s blog post @ &lt;a href=&#34;https://blogs.apache.org/logging/entry/apache_log4net_needs_help&#34;&gt;https://blogs.apache.org/logging/entry/&amp;hellip;&lt;/a&gt; and feel free to get your hands dirty! They are asking for help and will take it any way they can.&lt;/p&gt;

&lt;p&gt;Feel free to check their JIRA @ &lt;a href=&#34;https://issues.apache.org/jira/browse/LOG4NET&#34;&gt;https://issues.apache.org/jira/browse/LOG4NET&lt;/a&gt; and&lt;/p&gt;

&lt;p&gt;Dev mailing list @ &lt;a href=&#34;https://logging.apache.org/log4net/mail-lists.html&#34;&gt;https://logging.apache.org/log4net/mail-lists.html&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h3&gt;

&lt;p&gt;Totally unrelated, but: &lt;a href=&#34;http://angular.io&#34;&gt;Angular 2&lt;/a&gt; has also released its &amp;ldquo;final&amp;rdquo; version! Timing couldn&amp;rsquo;t be better and we are heavily invested in these new technologies in terms of education &amp;amp; man-hours&amp;ndash;I am giddy with excitement.&lt;/p&gt;

&lt;p&gt;Aside from that, all I can do is hope that &lt;em&gt;semver&lt;/em&gt; doesn&amp;rsquo;t turn into a developer nightmare (instead of &lt;em&gt;npm package hell&lt;/em&gt; or &lt;em&gt;nuget hell&lt;/em&gt;). Hopefully, some of the .NET tooling will also become significantly better as it is moved up out of beta. As much as a complete paradigm shift that the Core frameworks and open source are for Microsoft, I &lt;em&gt;do not&lt;/em&gt; think they are getting out of the business of prescription and spreading &amp;ldquo;best practices.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;So fear not&amp;ndash;we&amp;rsquo;re just barely getting past the bleeding edge here. :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Networking Woes</title>
      <link>https://nandotech.github.io/post/2016-09-20-comcast-networking-woes/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://nandotech.github.io/post/2016-09-20-comcast-networking-woes/</guid>
      <description>

&lt;p&gt;Let me start off by saying unequivocally and without any shadow of a doubt: I am not a networking expert.  Although I understand all the constructs of the web and most all of the requisite information pertaining to how computers and the internet communicate as well as the nuances of local and public networks.&lt;/p&gt;

&lt;p&gt;My real deep protocol knowledge extends mostly into the realm of software development and how bits/bytes are consumed over the wire. I, for one, found it &lt;em&gt;absolutely fascinating&lt;/em&gt; how &lt;a href=&#34;http://www.microsoft.com&#34;&gt;Microsoft&lt;/a&gt; and the &lt;a href=&#34;http://www.dot.net&#34;&gt;.NET team&lt;/a&gt; built the kestrel http server. There is an awesome video where &lt;a href=&#34;https://twitter.com/damianedwards&#34;&gt;Damian Edwards&lt;/a&gt; &lt;a href=&#34;https://vimeo.com/172009499&#34;&gt;discusses it here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That, however, is a discussion slated for another day. Truly fascinating though how they&amp;rsquo;ve basically chosen to look at any given http request like a sequence of &lt;code&gt;float&lt;/code&gt; values to avoid &lt;code&gt;string&lt;/code&gt; allocations.&lt;/p&gt;

&lt;p&gt;However, I digress, Today is mainly about 2 things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Venting&lt;/li&gt;
&lt;li&gt;Helping guide anyone who is running into the same/similar issues with Comcast.&lt;/li&gt;
&lt;li&gt;Venting&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://martinfowler.com/bliki/TwoHardThings.html&#34;&gt;(Lest we forget one of the hardest problems in Computer Science&amp;ndash;Off By One errors)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;comcast-default-behavior&#34;&gt;Comcast Default Behavior&lt;/h2&gt;

&lt;p&gt;So to get on with it: naturally the Comcast modem default behavior is to be extremely confusing. Our public, &lt;a href=&#34;http://www.ipchicken.com&#34;&gt;static IP&lt;/a&gt; address from &lt;a href=&#34;http://comcast.com&#34;&gt;Comcast&lt;/a&gt; here is &lt;code&gt;96.xxx.xxx.9&lt;/code&gt; (blocking some for safety/privacy).  One might expect the Comcast firewall to show this IP with the .10 Gateway, or something similar.  Instead, we get this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nandotech.github.io/img/comcast_ip.png&#34; alt=&#34;Comcast IP&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In case anyone missed that: for some reason I am unable to explain, if you have purchased a static IP or a group of IP&amp;rsquo;s from Comcast your router actually gives off your &lt;strong&gt;Default Gateway&lt;/strong&gt; as your &lt;em&gt;Public IP&lt;/em&gt; and your Comcast  Business Router will have a &lt;em&gt;Default Gateway&lt;/em&gt; referencing some other point or thing on their network (presumably where, in this case, our /30 routes through).&lt;/p&gt;

&lt;p&gt;After several visits and phone calls with Comcast, no engineer was able to reliably explain it to me either.  I&amp;rsquo;ve moved on to the &lt;a href=&#34;https://media2.giphy.com/media/hIavT8NX1SE4E/200.gif&#34;&gt;acceptance stage of my grief&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-your-own-router&#34;&gt;Setting up your own Router&lt;/h2&gt;

&lt;p&gt;All that said, this seemingly small thing has an interesting and convenient side effect.&lt;/p&gt;

&lt;p&gt;Since none of the public IP&amp;rsquo;s are in use, any new router you may want to plug in on the inside of it can use &lt;em&gt;any&lt;/em&gt; of your available static IP addresses and the Comcast modem is able to stay up and 100% functioning if you so choose (to partition your network, for example).&lt;/p&gt;

&lt;p&gt;Now this is where it gets confusing, especially for me&amp;ndash;this is because very often we are being dragged into an environment that we are not familiar with, did not set up, and/or there is no one available with the technical information (static IP range, subnet mask, etc) you actually need to set it up.&lt;/p&gt;

&lt;p&gt;To make matters worse, you always run the risk of receiving bad information from Comcast should you decide to call for information (Has happened to me, &lt;em&gt;more than once&lt;/em&gt;!).&lt;/p&gt;

&lt;h3 id=&#34;sidebar-which-router&#34;&gt;&lt;em&gt;Sidebar: Which Router?&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;As an FYI, the router referenced and used in the specific configuration shown here is a &lt;a href=&#34;https://www.amazon.com/MikroTik-CRS125-24G-1S-RM-rackmount-enclosure-manageable/dp/B00I4QJSIM&#34;&gt;Mikrotik Cloud Router Switch CRS125-24G&lt;/a&gt; which is also available in a &lt;a href=&#34;https://routerboard.com/CRS125-24G-1S-IN&#34;&gt;Non-Rackmount Version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For much more extreme loads, the &lt;a href=&#34;https://www.amazon.com/MikroTik-Cloud-Core-Router-1009-8G-1S-1S/dp/B00KVFLKHG&#34;&gt;Mikrotik Cloud Core Router 1009-8G-1S+&lt;/a&gt; is recommended.  (&lt;em&gt;NOTE: This particular version requires much more granular setup &amp;amp; understanding of some networking beyond the scope of this article to complete setup&lt;/em&gt;.)&lt;/p&gt;

&lt;p&gt;Once you do have the correct information, here is an example of how the network referenced above is set:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://nandotech.github.io/img/mikrotik-comcast-setup.png&#34; alt=&#34;Mikrotik Setup&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see and would expect, your &lt;em&gt;static IP&lt;/em&gt; and correct &lt;a href=&#34;https://www.aelius.com/njh/subnet_sheet.html&#34;&gt;&lt;em&gt;subnet mask&lt;/em&gt;&lt;/a&gt; (in this case, /30) need to be in the WAN IP Address field (this may differ or have a different name in other routers).&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;default gateway&lt;/em&gt; which the Comcast router uses as its IP, in turn, should be the &lt;em&gt;Gateway&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We choose to utilize &lt;a href=&#34;http://google.com&#34;&gt;Google&lt;/a&gt; and &lt;a href=&#34;http://opendns.com&#34;&gt;OpenDNS&lt;/a&gt; public DNS servers rather than Comcast&amp;rsquo;s usual defaults of &lt;code&gt;75.75.75.75&lt;/code&gt; and &lt;code&gt;75.75.76.76&lt;/code&gt;, though in some cases using the defaults helps to avoid some issues.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-it-up&#34;&gt;Wrapping It Up&lt;/h2&gt;

&lt;p&gt;Like I mentioned before; if you follow the strategy outlined above you&amp;rsquo;ll be able to set up your new router/firewall inside of the Comcast network, utilize any one of your static IP addresses as a public, and all the while leave the Comcast Router up &amp;amp; running/functioning perfectly.&lt;/p&gt;

&lt;p&gt;For security reasons, I personally turned off just about every single feature &amp;amp; network available on the default Comcast box once I got our &lt;a href=&#34;http://www.mikrotik.com&#34;&gt;Mikrotik&lt;/a&gt; working properly. This includes turning off all DHCP &amp;amp; Wireless on the Comcast modem.&lt;/p&gt;

&lt;p&gt;In my case, I can actually get to &lt;code&gt;10.1.10.1&lt;/code&gt; (Comcast Router Default IP) while on my other local network of &lt;code&gt;192.168.88.xxx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While convenient, once you have your firewall/router properly configured inside of your Comcast box, you should have very little reason to ever need to log into it.&lt;/p&gt;

&lt;p&gt;Your other option is if you want to partition your network into different &amp;ldquo;areas&amp;rsquo;, you could easily utilize both your Mikrotik Firewall network &lt;strong&gt;AND&lt;/strong&gt; your Comcast Firewall network in tandem even if you have only &lt;em&gt;one&lt;/em&gt; static IP address.&lt;/p&gt;

&lt;p&gt;The Comcast Firewall will broadcast your &lt;em&gt;Gateway IP&lt;/em&gt; while your own Firewall will broadcast your assigned &lt;em&gt;Static IP&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with AngularJS 1.x</title>
      <link>https://nandotech.github.io/post/2016-06-11-getting-started-angularjs/</link>
      <pubDate>Sat, 11 Jun 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://nandotech.github.io/post/2016-06-11-getting-started-angularjs/</guid>
      <description>&lt;p&gt;I recently took the Pluralsight course AngularJS: Get Started by Scott Allen.&lt;/p&gt;

&lt;p&gt;If you want the tl;dr early, it’s totally worth it and really starts to give you a pretty decent working knowledge of AngularJS, and what’s better yet: you build an actual working application in the process.&lt;/p&gt;

&lt;p&gt;I did my own tweaks with the UI, minor deviations as well as selecting my own theme, but otherwise it’s pretty cool to see just how easy it is to create beautiful AngularJS apps tied to an API that turns standard JSON responses with little heavy lifting. Powerful built-in data binding and directives like ng-repeat have me sold on Angular.&lt;/p&gt;

&lt;p&gt;Check out my Plunker with the working “Github Viewer” application. &lt;a href=&#34;http://plnkr.co/vmqj8K&#34;&gt;Link to plnkr.co&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also available on GitHub, &lt;a href=&#34;https://github.com/nandotech/umgbeta&#34;&gt;https://github.com/nandotech/umgbeta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Launches a page where you type any github username you’d like to look up and returns projects sorted by stars along with the user’s avatar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/0*7h_r_uTlUc68krRf.png&#34; alt=&#34;Screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You should also be able to view the source code. Feel free to make any comments! Special thanks again to Scott Allen &amp;amp; Pluralsight.&lt;/p&gt;

&lt;p&gt;Even with Angular 2.0 coming, I’ll bear with the growing pains. There’s a bright future ahead for this stack and developing with it is a joy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Priorities Over Feelings</title>
      <link>https://nandotech.github.io/post/2016-06-10-priorities-over-feelings/</link>
      <pubDate>Fri, 10 Jun 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://nandotech.github.io/post/2016-06-10-priorities-over-feelings/</guid>
      <description>

&lt;h4 id=&#34;let-s-be-honest&#34;&gt;Let&amp;rsquo;s be honest.&lt;/h4&gt;

&lt;h5 id=&#34;most-people-are-not-very-good-at-this&#34;&gt;Most  people are not very good at this.&lt;/h5&gt;

&lt;p&gt;At first, it almost sounds dumb, like some cliche you hear from motivational speakers on a regular basis. &lt;strong&gt;Far from that&lt;/strong&gt;, it is an extremely astute articulation of a decision one as an entrepreneur and a business owner has to consciously make on a daily basis.&lt;/p&gt;

&lt;p&gt;On a daily basis, we must choose to put our &lt;em&gt;priorities&lt;/em&gt; over our &lt;em&gt;feelings&lt;/em&gt;.  Again, not a difficult concept to grasp.  However, it is a much more difficult concept to truthfully embrace whole-heartedly because let&amp;rsquo;s face it: &lt;a href=&#34;https://www.psychologytoday.com/blog/intense-emotions-and-strong-feelings/201012/it-or-not-emotions-will-drive-the-decisions-you&#34;&gt;humans are not very good at controlling emotion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://successyeti.com/wp-content/uploads/2015/06/TSBB_Frustration-440x293.jpg&#34; alt=&#34;Strong emotions&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So here we are.  Relegated to the endless tug-of-war.&lt;/p&gt;

&lt;p&gt;Or are we?  After serious reflection I realized that there is absolutely no reason to be or stay a slave to your emotions like this.&lt;/p&gt;

&lt;p&gt;I recently had an extremely difficult client.  My company prides itself on providing excellent customer service, going so far as to even provide our regular clients slack channels where they have unfettered access to us pretty much &lt;sup&gt;24&lt;/sup&gt;&amp;frasl;&lt;sub&gt;7&lt;/sub&gt;.&lt;/p&gt;

&lt;p&gt;I found myself nearly having a stroke and moreover negatively impacting my relationship with my client (who luckily also happens to be a friend, or he probably would have fired me already) on a daily basis.  Every day I was allowing my feelings to get in the way of my priorities.&lt;/p&gt;

&lt;p&gt;This doesn&amp;rsquo;t mean that it is going to be easy.  As a matter of fact, I had to take some rather &lt;strong&gt;drastic&lt;/strong&gt; measures but in the end it has worked out for the best.  We&amp;rsquo;ve reached the end of the week&amp;ndash;neither one of us (my client or I) wants to kill each other and he has gotten better customer service this week than he has in several weeks.&lt;/p&gt;

&lt;p&gt;You might be wondering, what changed?  I put my PRIORITIES over my FEELINGS.  Thanks to the wonders of technology: &lt;em&gt;I shut down the Slack channel and deactivated my friend&amp;rsquo;s slack account&lt;/em&gt;.  He no longer has the ability to distract us while we&amp;rsquo;re working or frustrate me with questions that I must impulsively answer.  Impulsive in that I tended to overreact, so I  had to change the dynamic of communication.&lt;/p&gt;

&lt;p&gt;Our relationship has never been better.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Going From Zero to One</title>
      <link>https://nandotech.github.io/post/2016-02-27-going-from-zero-to-one/</link>
      <pubDate>Sat, 27 Feb 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://nandotech.github.io/post/2016-02-27-going-from-zero-to-one/</guid>
      <description>&lt;p&gt;Chances are I’m also not the first person you’ve heard this from, either. This is one of the very few books that truly is a must-read for anyone who calls themselves a business owner, entrepreneur or anyone even considering the prospect of it.&lt;/p&gt;

&lt;p&gt;Turns out my Amazon Prime subscription came with a free few Audible credits. Naturally, the temptation of free being too much to resist, I grabbed a copy of Peter Thiel’s Zero to One.
Peter Thiel co-founded PayPal in 1998 with Max Levchin and later Elon Musk and served as its CEO before going on to co-found Palantir and many other successful investments and ventures.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/0*xYzzIwDiflb5ndSD.jpg&#34; alt=&#34;Zero to One&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I listened to the entire book in the last 30 hours and am preparing myself for a second listen. To say that Mr. Thiel provides sage advice to any entrepreneur or businessperson considering it is a gross understatement. Some of what you read (hear?) may sound a bit grandiose, but the author manages to have these great visions always be firmly rooted in really simple fundamental truths.&lt;/p&gt;

&lt;p&gt;The book opens posing the contrarian question that he poses at every interview he has, “What very important truth do very few people agree with you on?”&lt;/p&gt;

&lt;p&gt;Think about it. At once, the question asks you to identify an important truth (daunting, on its own) while adding that very few people agree with you on it. Outright asking someone to voice what is inherently an unpopular opinion by definition can be an uncomfortable question to ask. But an important one nonetheless.
Peter Thiel and Blake Masters provide us examples of good and bad answers to this question, as well as their own responses. Mr. Thiel postulates that monopolies are good for business while perfect competition stifles it. Something naturally opposed to what we are taught our entire lives.&lt;/p&gt;

&lt;p&gt;My answer? We are on the verge of having a technically illiterate generation if we do not begin to close the tech skills gap immediately and teach computer programming as a core subject beginning in grade school. I haven’t exactly polled it. Does that qualify as unpopular? Is the idea that today’s system of education is failing our youth not something many people would agree with me on? I’m not sure.&lt;/p&gt;

&lt;p&gt;There’s one thing I am sure of. We must go from Zero to One.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A little bit about us.</title>
      <link>https://nandotech.github.io/post/2015-11-27-first-post/</link>
      <pubDate>Fri, 27 Nov 2015 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://nandotech.github.io/post/2015-11-27-first-post/</guid>
      <description>

&lt;p&gt;We are just 2 super geeks who blog here in our spare time because we love what we do. We are software developers and telephony solution experts in South Florida. What’s more, if our experiences and (sometimes) horror stories can entertain you, or better yet, help guide you through your next project then we feel like we’ve given back to the community and are no longer just consumers taking in information.&lt;/p&gt;

&lt;p&gt;Formally, we are &lt;a href=&#34;http://www.nandotech.com&#34;&gt;NandoTech, Inc.&lt;/a&gt; Software developers and telephony solution experts. Also, a full service IT company located in South Florida, catering mostly to call centers and specializing in the .NET stack for our software. About mid-way through 2015 we decided NandoTech had something to offer the market that does not exist.&lt;/p&gt;

&lt;p&gt;So here we are. Working gruelingly long weeks, working all hours of the night, always concerned about customer x, y or z and that they have everything they need for their business to operate smoothly. And we absolutely love it.&lt;/p&gt;

&lt;p&gt;We will be posting relevant articles mostly pertaining to software development, startups, VoIP/Telephony systems as well as ASP.NET MVC &amp;amp; web dev. As a general rule, there is nothing that we DON’T do–we just have our preferences and opinions.&lt;/p&gt;

&lt;p&gt;Preferences and opinions which by the way are very much our own, and do not necessarily reflect those of NandoTech, Inc or any of its shareholders.
At NandoTech, we are:&lt;/p&gt;

&lt;h3 id=&#34;fernando-rodriguez-president-ceo-software-development&#34;&gt;Fernando Rodriguez, President/CEO — Software Development&lt;/h3&gt;

&lt;h3 id=&#34;arron-mayers-vice-president-technical-development&#34;&gt;Arron Mayers — Vice President — Technical Development&lt;/h3&gt;

&lt;h2 id=&#34;nandotech-inc&#34;&gt;&lt;em&gt;NandoTech, Inc&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Here, we are just 2 super geeks trying to help others like us.
Hope you enjoy the blog. Our passion to always keep learning new things keeps us inspired, and your support just might keep us fed.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>