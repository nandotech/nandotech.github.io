<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Async on NandoTech</title>
    <link>https://blog.nandotech.com/tags/async/</link>
    <description>Recent content in Async on NandoTech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>info@nandotech.com (Fernando Rodriguez)</managingEditor>
    <webMaster>info@nandotech.com (Fernando Rodriguez)</webMaster>
    <lastBuildDate>Thu, 10 Nov 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.nandotech.com/tags/async/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Exploring Asynchronous Modules with NancyFX 2.0 &amp; .NET Core</title>
      <link>https://blog.nandotech.com/post/2016-11-10-dot-net-core-nancy-async/</link>
      <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
      <author>info@nandotech.com (Fernando Rodriguez)</author>
      <guid>https://blog.nandotech.com/post/2016-11-10-dot-net-core-nancy-async/</guid>
      <description>

&lt;h2 id=&#34;this-post-will-serve-as-a-follow-up-to-our-earlier-nancyfx-exploration-a-few-weeks-ago-i-posted-building-an-awesome-api-with-nancyfx-2-0-dapper-post-2016-10-25-nancyfx-webapi-dapper-where-we-covered-all-the-basics-of-nancy-https-www-nancyfx-org-and-running-on-net-core-https-dot-net:a83fc865d44deb7c6d7bd80cb3799ea5&#34;&gt;This post will serve as a follow-up to our earlier NancyFX exploration.  A few weeks ago, I posted &lt;a href=&#34;https://blog.nandotech.com/post/2016-10-25-nancyfx-webapi-dapper/&#34;&gt;Building an (awesome) API with NancyFX 2.0 + Dapper&lt;/a&gt; where we covered all the basics of &lt;a href=&#34;https://www.nancyfx.org&#34;&gt;Nancy&lt;/a&gt; and running on &lt;a href=&#34;https://dot.net&#34;&gt;.NET Core&lt;/a&gt;.&lt;/h2&gt;

&lt;p&gt;If you have not &lt;a href=&#34;https://blog.nandotech.com/post/2016-10-25-nancyfx-webapi-dapper/&#34;&gt;read our previous post&lt;/a&gt;, not to worry, there will be very little to no overlap between the 2 posts.  Here, we will focus in on and deep dive into the use of &lt;code&gt;Async&lt;/code&gt; Modules in &lt;em&gt;NancyFX&lt;/em&gt; as well as how the &lt;code&gt;Before&lt;/code&gt; and &lt;code&gt;After&lt;/code&gt; action method hooks work.  Since there is not much additional code, we will use the same repository to demonstrate usage.&lt;/p&gt;

&lt;h3 id=&#34;github-repo-https-github-com-nandotech-vsnancydemo-https-github-com-nandotech-vsnancydemo:a83fc865d44deb7c6d7bd80cb3799ea5&#34;&gt;Github Repo: &lt;a href=&#34;https://github.com/nandotech/VSNancyDemo&#34;&gt;https://github.com/nandotech/VSNancyDemo&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;If you are unfamiliar with &lt;a href=&#34;http://dot.net&#34;&gt;.NET Core&lt;/a&gt; or &lt;a href=&#34;http://www.nancyfx.org&#34;&gt;Nancy&lt;/a&gt;, then I do reccomend checking out some of the other posts available on this blog related to .NET Core and specifically our post on &lt;a href=&#34;https://blog.nandotech.com/post/2016-10-25-nancyfx-webapi-dapper/&#34;&gt;Building an API w/ NancyFX 2.0 &amp;amp; Dapper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, there are not a ton of resources covering NancyFX 2.0 just yet, so here I am doing my part. &lt;a href=&#34;https://twitter.com/shanselman&#34;&gt;Scott Hanselman&lt;/a&gt; recently also wrote a similar post (but using  &lt;a href=&#34;https://docs.efproject.org&#34;&gt;Entity Framework Core 1.0&lt;/a&gt;) available &lt;a href=&#34;http://www.hanselman.com/blog/ExploringAMinimalWebAPIWithNETCoreAndNancyFX.aspx&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Nancy &lt;a href=&#34;https://github.com/nancyfx/nancy&#34;&gt;repository&lt;/a&gt; has a ton of &lt;a href=&#34;https://github.com/NancyFx/Nancy/tree/master/samples&#34;&gt;samples&lt;/a&gt; including one showing off &lt;code&gt;Async&lt;/code&gt;: &lt;a href=&#34;https://github.com/NancyFx/Nancy/tree/master/samples/Nancy.Demo.Async&#34;&gt;Nancy.Demo.Async&lt;/a&gt;.  Once again, very unfortunately, the grand majority of what you see is syntax for version &lt;code&gt;1.x&lt;/code&gt; and therefore does not help us.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve read this far along, I&amp;rsquo;m sure you&amp;rsquo;re ready to get down and dirty.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/NancyFx/Nancy/tree/master/samples/Nancy.Demo.Async&#34;&gt;NancyFX makes it incredibly easy to declare async modules&lt;/a&gt;, making the &lt;code&gt;Modules&lt;/code&gt; appear nearly indistinguishable from any other Nancy Module. That previous link covers all the basics, however using version &lt;code&gt;1.x&lt;/code&gt; style route declarations. The announcement and wiki detailing the &lt;a href=&#34;https://github.com/NancyFx/Nancy/wiki/Nancy-v2-Upgrade-Notes&#34;&gt;Nancy v2 upgrade notes&lt;/a&gt; explain some of the differences between &lt;code&gt;1.x&lt;/code&gt; and &lt;code&gt;2.x&lt;/code&gt; as of now.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AsyncModule.cs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class AsyncModule : NancyModule
    {
        public AsyncModule()
        {
            Get(&amp;quot;/async&amp;quot;, async (args, ct) =&amp;gt;
            {
                await Task.Delay(1000);

                await Task.Delay(1000);

                var client = new HttpClient();
                var res = await client.GetAsync(&amp;quot;http://nancyfx.org&amp;quot;);
                var content = await res.Content.ReadAsStringAsync();

                return (Response)content;
            });
            
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While extremely contrived, the above example shows how to declare &lt;code&gt;Async Modules&lt;/code&gt;, &lt;code&gt;await&lt;/code&gt; several responses and then return our &lt;code&gt;content&lt;/code&gt; in the from of a string. That is, if you are following along and have entered the above as a &lt;code&gt;Module&lt;/code&gt; in your Nancy project, you should see this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/A9TJowS.png&#34; alt=&#34;NancyFX Async Module&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Upon closer inspection, that is clearly the plain &lt;code&gt;HTML&lt;/code&gt; from &lt;a href=&#34;http://www.nancyfx.org&#34;&gt;http://www.nancyfx.org&lt;/a&gt;.  Nonetheless, the point here was to highlight the proper syntax for an asynchronous &lt;code&gt;Nancy Module&lt;/code&gt; and demonstrate using &lt;code&gt;await&lt;/code&gt; to simulate some possibly long-running process.&lt;/p&gt;

&lt;p&gt;Speaking of asynchronicity, &lt;em&gt;NancyFX&lt;/em&gt; also introduces an incredibly useful tool in the &lt;code&gt;Before&lt;/code&gt; and &lt;code&gt;After&lt;/code&gt; Request Hooks that allow you to define functions and/or code that you would like to run either before or after any request in the entire &lt;code&gt;Module&lt;/code&gt;.  These are also known as the &lt;code&gt;BeforePipeline&lt;/code&gt; and &lt;code&gt;AfterPipeline&lt;/code&gt;&amp;ndash;the final one, which we will not cover here, is the &lt;code&gt;OnError&lt;/code&gt; pipeline.&lt;/p&gt;

&lt;p&gt;These pipelines for requests provide us with a lot of lattitude and the possibility of causing all types of different behaviors. As an example, if you have authentication/authorization on your application and there are only specific spots with certain priviledges: it is perfectly feasible and would make sense to add some type of authenticator that could run in the &lt;code&gt;Before&lt;/code&gt; method of any &lt;code&gt;Module&lt;/code&gt;.  By the same token, you are capable of completely intercepting a request from either the &lt;code&gt;Before&lt;/code&gt; or &lt;code&gt;After&lt;/code&gt; module (or allowing &lt;code&gt;OnError&lt;/code&gt; to execute, if there were errors, let&amp;rsquo;s say).&lt;/p&gt;

&lt;p&gt;To illustrate, below is our &lt;em&gt;DispoModule.cs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class DispoModule : NancyModule
    {
        public DispoModule(IDispoRepository _repo)
            : base(&amp;quot;/dispo&amp;quot;)
        {
            Get(&amp;quot;/&amp;quot;, args =&amp;gt;
            {
                return _repo.GetAll();
            });

            Get(&amp;quot;Id={id}&amp;quot;, args =&amp;gt;
            {
                return _repo.Get(args.id);
            });

            Post(&amp;quot;/Name={name}&amp;amp;Desc={description}&amp;quot;, args =&amp;gt;
            {
                var posted = new Disposition();
                posted.Name = args.Name;
                posted.Description = args.Description;
                posted.Timestamp = DateTime.Now;
                _repo.Add(posted);

                return posted;
            });

            Delete(&amp;quot;Id={id}&amp;quot;, args =&amp;gt;
            {
                _repo.Remove(args.id);
                return $&amp;quot;{args.id} Removed&amp;quot;;
            });
        }

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you read our &lt;a href=&#34;https://blog.nandotech.com/post/2016-10-25-nancyfx-webapi-dapper/&#34;&gt;other post&lt;/a&gt; this probably looks very familiar&amp;ndash;it is the module that allows &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; requests to accomplish different things.  For further clarification, feel free to &lt;a href=&#34;https://github.com/nandotech/VSNancyDemo&#34;&gt;check out the Github repo here&lt;/a&gt;.  So what if we wanted to run a &lt;code&gt;Before&lt;/code&gt; hook that intercepted the request under certain circumstances?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DispoModule.cs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt; public class DispoModule : NancyModule
    {
        public DispoModule(IDispoRepository _repo)
            : base(&amp;quot;/dispo&amp;quot;)
        {
            Before += (ctx) =&amp;gt; {
                return &amp;quot;Intercepted&amp;quot;;
            };

            //Remainder of code stays same
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We navigate to &lt;code&gt;/dispo/&lt;/code&gt; and exactly as expected, the browser simply returns the &lt;code&gt;string&lt;/code&gt; &amp;ldquo;Intercepted&amp;rdquo;, indicating that our &lt;code&gt;Before&lt;/code&gt; hook did hijack the request. So, in other words, using &lt;code&gt;Before&lt;/code&gt; executes that specified action before executing the requested Route, right?&lt;/p&gt;

&lt;p&gt;This is not &lt;em&gt;entirely&lt;/em&gt; true.  Because of the manner which Nancy operates, when you first hit a module (ANY Module) with a request, Nancy steps through the &lt;code&gt;Module&lt;/code&gt; to ensure the current route is valid/matches. I imagine this has in large part to do with the fact the routes are dynamically constructed and also for Nancy to determine the Route with the highest &lt;strong&gt;weight&lt;/strong&gt; to receive the request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EDIT 11/11/2016&lt;/strong&gt;: &lt;em&gt;Thanks to &lt;a href=&#34;http://www.philliphaydon.com/&#34;&gt;Phillip Haydon&lt;/a&gt; from the &lt;a href=&#34;http://www.nancyfx.org&#34;&gt;NancyFX Team&lt;/a&gt; for some clarification on how this works. Reach him on &lt;a href=&#34;https://www.twitter.com&#34;&gt;Twitter&lt;/a&gt; at &lt;a href=&#34;https://twitter.com/philliphaydon&#34;&gt;@philliphaydon&lt;/a&gt;. Quoted from him:&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;This is because we scan all modules and the routes and build a cache. Once built then we just match based on route and invoke the correct Func on the module for that request.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Awesome.  I was actually not aware Nancy built and kept a cache of all routes, that is really rather ingenious and makes subsequent executions extremely efficient.&lt;/p&gt;

&lt;p&gt;Once Nancy finds a matching route, then it jumps over to the &lt;code&gt;Before&lt;/code&gt; hook, if there is one available. See the execution of our &lt;code&gt;DispoModule.cs&lt;/code&gt; currently, first breaking at the matching Route (&amp;ldquo;/&amp;rdquo;) and upon pressing &lt;code&gt;F5&lt;/code&gt; it jumps right into the before hook.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/wdc06Yu.gif&#34; alt=&#34;Nancy 2.0 Sync Before Gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There is one minor difference in syntax between &lt;code&gt;async&lt;/code&gt; and non-&lt;code&gt;async&lt;/code&gt; Modules when implementing &lt;code&gt;Before/After&lt;/code&gt;.  As you just saw, in a synchronous controller, your &lt;code&gt;Before&lt;/code&gt; &amp;amp; &lt;code&gt;After&lt;/code&gt; lifecycle hooks should look like these:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Synchronous&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Before += (ctx) =&amp;gt; 
            {
                return &amp;quot;Interception&amp;quot;;
            };

After += (ctx) =&amp;gt; 
            {
                ctx.Resposne = &amp;quot;Post Interception&amp;quot;;
            };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now having added this to our DispoModule.cs, let&amp;rsquo;s see how Nancy treats this.  Not surprisingly, very similar to what we just saw a minute ago.  &lt;em&gt;Nancy&lt;/em&gt; steps through every route (including &lt;code&gt;Before&lt;/code&gt; and &lt;code&gt;After&lt;/code&gt;) to figure out which is the correctly matching route (or pattern). Once the framework decides the request is properly formed, it enters the &lt;code&gt;Before&lt;/code&gt; method and sets our &lt;code&gt;Response&lt;/code&gt;, however our request is not done yet.&lt;/p&gt;

&lt;p&gt;From here, (since we performed a &lt;code&gt;GET&lt;/code&gt; request on &lt;code&gt;/dispo/&lt;/code&gt;), we enter &lt;code&gt;Get(&amp;quot;/&amp;quot;, args)&lt;/code&gt; from the &lt;em&gt;DispoModule.cs&lt;/em&gt;. Now here&amp;rsquo;s the interesting part, or at the very least something to be conscious of: inside of our &lt;code&gt;GET&lt;/code&gt; we do &lt;code&gt;return _repo.GetAll();&lt;/code&gt; which is supposed to return a JSON object of all the &lt;code&gt;Dispo&lt;/code&gt;&amp;rsquo;s currently saved in the database. Our lovely &lt;code&gt;NancyFX&lt;/code&gt; framework then moves on to the &lt;code&gt;After&lt;/code&gt; action (&lt;code&gt;ctx.Response = &amp;quot;Post-Interception&amp;quot;&lt;/code&gt;) which re-writes the current &lt;code&gt;Response&lt;/code&gt; and leaves us with the new simple string.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/BEtuXdO.png&#34; alt=&#34;NancyFX After Hook&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Like I mentioned, using &lt;code&gt;Before&lt;/code&gt;/&lt;code&gt;After&lt;/code&gt; in &lt;code&gt;async&lt;/code&gt; modules has a slightly different syntax. In these, not only are you forced to declare them as explicity &lt;code&gt;async&lt;/code&gt;, but you also have the option of using a &amp;ldquo;Cancellation Token&amp;rdquo; (&lt;code&gt;ct&lt;/code&gt;) in order to cause and/or track failures.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Asynchronous&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Before += async (ctx, ct) =&amp;gt;
            {
                this.AddToLog(&amp;quot;Before Hook Delay\n&amp;quot;);
                await Task.Delay(5000);

                return null;
            };

After += async (ctx, ct) =&amp;gt;
            {
                this.AddToLog(&amp;quot;After Hook Delay\n&amp;quot;);
                await Task.Delay(5000);
                this.AddToLog(&amp;quot;After Hook Complete\n&amp;quot;);

                ctx.Response = this.GetLog();
            };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In both the synchronous and asynchronous examples, if your eye is better than mine you also noticed one other glaring difference.  Personally, I had to figure it out the hard way when error after error kept popping up.&lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;Before&lt;/code&gt; pipeline you are capable of &lt;code&gt;return&lt;/code&gt;ing anything and short-circuiting a request in that way, so long as you do not also have an &lt;code&gt;After&lt;/code&gt; method (or so long as your &lt;code&gt;After&lt;/code&gt; pipeline does not edit the &lt;code&gt;ctx.Response&lt;/code&gt; as your response would then be overwritten).&lt;/p&gt;

&lt;h3 id=&#34;please-note-you-may-not-return-values-from-the-after-pipeline-in-order-to-achieve-this-you-may-use-ctx-response-and-set-it-as-you-please:a83fc865d44deb7c6d7bd80cb3799ea5&#34;&gt;Please note: &lt;strong&gt;You &lt;em&gt;may not&lt;/em&gt; &lt;code&gt;return&lt;/code&gt; values from the &lt;code&gt;After&lt;/code&gt; pipeline.  In order to achieve this you may use &lt;code&gt;ctx.Response =&lt;/code&gt;  and set it as you please.&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Nonetheless, these are fantastic abilities offered up for free by the framework and are extremely easy to take advantage of. Moreover, even though I didn&amp;rsquo;t really go over it, these code examples all also show the &lt;code&gt;ctx&lt;/code&gt; or &lt;code&gt;NancyContext&lt;/code&gt; that comes baked into the framework, accessible from nearly any request.&lt;/p&gt;

&lt;p&gt;So with that said, here is our &lt;code&gt;AsyncModule&lt;/code&gt; that just shows off some of the features available to us as well as a decent example of using built-in &lt;code&gt;NancyContext&lt;/code&gt; to make a simple logger.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AsyncModule.cs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public class AsyncModule : NancyModule
    {
        public AsyncModule()
        {
            Before += async (ctx, ct) =&amp;gt;
            {
                this.AddToLog(&amp;quot;Before Hook Delay\n&amp;quot;);
                await Task.Delay(5000);

                return null;
            };

            After += async (ctx, ct) =&amp;gt;
            {
                this.AddToLog(&amp;quot;After Hook Delay\n&amp;quot;);
                await Task.Delay(5000);
                this.AddToLog(&amp;quot;After Hook Complete\n&amp;quot;);

                ctx.Response = this.GetLog();
            };

            Get(&amp;quot;/async&amp;quot;, async (args, ct) =&amp;gt;
            {

                this.AddToLog(&amp;quot;Delay 1\n&amp;quot;);
                await Task.Delay(1000);

                this.AddToLog(&amp;quot;Delay 2\n&amp;quot;);
                await Task.Delay(1000);

                this.AddToLog(&amp;quot;Executing async http client\n&amp;quot;);
                var client = new HttpClient();
                var res = await client.GetAsync(&amp;quot;http://nancyfx.org&amp;quot;);
                var content = await res.Content.ReadAsStringAsync();

                this.AddToLog(&amp;quot;Response: &amp;quot; + content.Split(&#39;\n&#39;)[0] + &amp;quot;\n&amp;quot;);

                return (Response)this.GetLog();
            });
            
        }

        private void AddToLog(string logLine)
        {
            if (!this.Context.Items.ContainsKey(&amp;quot;Log&amp;quot;))
            {
                this.Context.Items[&amp;quot;Log&amp;quot;] = string.Empty;
            }

            this.Context.Items[&amp;quot;Log&amp;quot;] = (string)this.Context.Items[&amp;quot;Log&amp;quot;] + DateTime.Now + &amp;quot; : &amp;quot; + logLine;
        }

        private string GetLog()
        {
            if (!this.Context.Items.ContainsKey(&amp;quot;Log&amp;quot;))
            {
                this.Context.Items[&amp;quot;Log&amp;quot;] = string.Empty;
            }

            return (string)this.Context.Items[&amp;quot;Log&amp;quot;];
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, this is designed to really show off some of the &lt;code&gt;Async&lt;/code&gt; features as well as using &lt;code&gt;Before&lt;/code&gt; and &lt;code&gt;After&lt;/code&gt; hooks in tandem with an &lt;code&gt;Async&lt;/code&gt; Module.&lt;/p&gt;

&lt;p&gt;Since our &lt;code&gt;GET&lt;/code&gt; request is marked &lt;code&gt;async&lt;/code&gt;, so are our &lt;code&gt;Before&lt;/code&gt; &amp;amp; &lt;code&gt;After&lt;/code&gt; pipelines. By that same token, they both now operate just like any other asynchronous method.  We can &lt;code&gt;await&lt;/code&gt; any long-running action which we simulate here using &lt;code&gt;Task.Delay()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you run the above code, here is what you will see in your browser:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;11/10/2016 6:47:15 PM : Before Hook Delay
11/10/2016 6:47:20 PM : Delay 1
11/10/2016 6:47:21 PM : Delay 2
11/10/2016 6:47:22 PM : Executing async http client
11/10/2016 6:47:23 PM : Response: &amp;lt;!DOCTYPE html&amp;gt;
11/10/2016 6:47:23 PM : After Hook Delay
11/10/2016 6:47:28 PM : After Hook Complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see &amp;ldquo;Before Hook Delay&amp;rdquo; is triggered in the &lt;code&gt;Before&lt;/code&gt; method exactly 5 seconds prior to the next statement.  Then there are &amp;ldquo;Delay 1&amp;rdquo; and &amp;ldquo;Delay 2&amp;rdquo;, followed by &amp;ldquo;Executing async http client&amp;rdquo; where we are simply using &lt;code&gt;HttpClient&lt;/code&gt; to run a &lt;code&gt;GET&lt;/code&gt; request to &lt;a href=&#34;http://nancyfx.org&#34;&gt;http://nancyfx.org&lt;/a&gt;.  This is also output to the &amp;ldquo;Log&amp;rdquo; (using &lt;code&gt;AddToLog&lt;/code&gt;) and we see on Line 5, &lt;code&gt;11/10/2016 6:47:23 PM : Response: &amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;.  The final 2 messages that display are both clearly in the &lt;code&gt;After&lt;/code&gt; hook of the pipeline.&lt;/p&gt;

&lt;p&gt;In any case, I hope this helps someone and further helps to clarify any questions you may have regarding the framework. Some up-to-date documentation may be hard to find, but &lt;strong&gt;please&lt;/strong&gt; do not allow that to discourage you from trying Nancy out and finding out if it&amp;rsquo;s for you.&lt;/p&gt;

&lt;p&gt;If you like what you see and would like to either build applications using Nancy or contribute to the project (&lt;a href=&#34;https://github.com/NancyFx/Nancy&#34;&gt;Nancy is open source&lt;/a&gt;), please do not hesitate.&lt;/p&gt;

&lt;p&gt;There is an awesome community of &lt;a href=&#34;http://nancyfx.slack.com&#34;&gt;&lt;code&gt;NancyFX&lt;/code&gt; developer&amp;rsquo;s Slack&lt;/a&gt; that you may join to interact with and ask questions, 100% free to join.  The actual Nancy developers also frequent the chat very regularly.&lt;/p&gt;

&lt;p&gt;Thank you for reading and please do come visit us @ &lt;a href=&#34;http://nancyfx.slack.com&#34;&gt;http://nancyfx.slack.com&lt;/a&gt; and let us know what you think!  Questions? Concerns? Need help implementing a feature?  Come on and stop by.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>